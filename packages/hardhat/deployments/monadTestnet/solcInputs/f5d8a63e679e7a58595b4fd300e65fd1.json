{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/GameSave.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title GameSave\n * @dev Contract for saving and loading game data to/from the blockchain\n */\ncontract GameSave is Ownable, ReentrancyGuard, Pausable {\n    // Game data structure\n    struct SaveData {\n        uint256 version;\n        uint256 timestamp;\n        // Player data\n        PlayerData player;\n        // Arrays for different game elements\n        InventoryItem[] inventory;\n        FarmingData[] farming;\n        MapChange[] mapChanges;\n    }\n\n    // Player data structure\n    struct PlayerData {\n        uint256 positionX;\n        uint256 positionY;\n        uint256 health;\n        uint256 selectedHotbarSlot;\n    }\n\n    // Inventory item structure\n    struct InventoryItem {\n        uint256 slotIndex;\n        string itemId;\n        uint256 quantity;\n    }\n\n    // Farming data structure\n    struct FarmingData {\n        uint256 positionX;\n        uint256 positionY;\n        string cropId;\n        uint256 growthStage;\n        uint256 plantedTime;\n        uint256 lastWateredTime;\n    }\n\n    // Map change structure\n    struct MapChange {\n        string layer;\n        uint256 positionX;\n        uint256 positionY;\n        int256 tileIndex;\n    }\n\n    // Mapping from address to save data\n    mapping(address => SaveData) private gameSaves;\n    mapping(address => bool) private hasSave;\n\n    mapping(address => bool) private marketplaceApprovals;\n\n    // Events\n    event GameSaved(address indexed player, uint256 timestamp);\n    event SaveDeleted(address indexed player);\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Save game data to the blockchain\n     */\n    function saveGame(\n        address user,\n        uint256 _version,\n        uint256 _timestamp,\n        PlayerData calldata _player,\n        InventoryItem[] calldata _inventory,\n        FarmingData[] calldata _farming,\n        MapChange[] calldata _mapChanges\n    ) external whenNotPaused nonReentrant {\n        SaveData storage saveData = gameSaves[user];\n\n        saveData.version = _version;\n        saveData.timestamp = _timestamp;\n        saveData.player = _player;\n\n        // Clear existing arrays and replace with new data\n        delete saveData.inventory;\n        delete saveData.farming;\n        delete saveData.mapChanges;\n\n        // Save inventory items\n        for (uint i = 0; i < _inventory.length; i++) {\n            saveData.inventory.push(_inventory[i]);\n        }\n\n        // Save farming data\n        for (uint i = 0; i < _farming.length; i++) {\n            saveData.farming.push(_farming[i]);\n        }\n\n        // Save map changes\n        for (uint i = 0; i < _mapChanges.length; i++) {\n            saveData.mapChanges.push(_mapChanges[i]);\n        }\n\n        hasSave[user] = true;\n\n        emit GameSaved(user, _timestamp);\n    }\n\n    function loadGame(address user)\n        external\n        view\n        whenNotPaused\n        returns (\n            uint256 version,\n            uint256 timestamp,\n            PlayerData memory player,\n            InventoryItem[] memory inventory,\n            FarmingData[] memory farming,\n            MapChange[] memory mapChanges\n        )\n    {\n        require(hasSave[user], \"No save data found for this address\");\n\n        SaveData storage saveData = gameSaves[user];\n\n        return (\n            saveData.version,\n            saveData.timestamp,\n            saveData.player,\n            saveData.inventory,\n            saveData.farming,\n            saveData.mapChanges\n        );\n    }\n\n    /**\n     * @dev Update the player's inventory\n     * @param user The address of the player\n     * @param _inventory The new inventory items\n     */\n    function updateInventory(\n        address user,\n        InventoryItem[] calldata _inventory\n    ) external whenNotPaused nonReentrant {\n        require(marketplaceApprovals[msg.sender], \"Marketplace approval required\");\n        require(hasSave[user], \"No save data found for this address\");\n\n        SaveData storage saveData = gameSaves[user];\n\n        // Clear existing inventory and replace with new data\n        delete saveData.inventory;\n\n        // Save inventory items\n        for (uint i = 0; i < _inventory.length; i++) {\n            saveData.inventory.push(_inventory[i]);\n        }\n    }\n\n    /**\n     * @dev Check if the player has a saved game\n     * @return Whether the player has a saved game\n     */\n    function hasSaveData(address user) external view returns (bool) {\n        return hasSave[user];\n    }\n\n    /**\n     * @dev Delete the current save\n     */\n    function deleteSaveData(address user) external whenNotPaused nonReentrant {\n        require(hasSave[user], \"No save data found for this address\");\n\n        delete gameSaves[user];\n        hasSave[user] = false;\n\n        emit SaveDeleted(user);\n    }\n\n    /**\n     * @dev Set marketplace approval for a user\n     * @param user The address of the user\n     * @param approved Whether the user is approved for marketplace actions\n     */\n    function setMarketplaceApproval(\n        address user,\n        bool approved\n    ) external onlyOwner {\n        marketplaceApprovals[user] = approved;\n    }\n\n    /**\n     * @dev Check if a user is approved for marketplace actions\n     * @param user The address of the user\n     * @return Whether the user is approved for marketplace actions\n     */\n    function isMarketplaceApproved(\n        address user\n    ) external view returns (bool) {\n        return marketplaceApprovals[user];\n    }\n\n    /**\n     * @dev Pause the contract (only owner)\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the contract (only owner)\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/VolatileMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport { Counters } from \"openzeppelin/contracts/utils/Counters.sol\";\nimport \"./GameSave.sol\";\n\n/**\n * @title VolatileMarketplace\n * @dev A marketplace contract for trading in-game items with supply and demand dynamics\n * similar to the Steam marketplace. All transactions are conducted with native MON.\n */\ncontract VolatileMarketplace is Ownable, ReentrancyGuard, Pausable {\n    using Counters for Counters.Counter;\n\n    // Contract dependencies\n    GameSave private gameSave;\n\n    // Listing counter\n    Counters.Counter private _listingIds;\n\n    // Fee structure\n    uint256 public marketplaceFeePercentage = 250; // 2.5% (using basis points: 10000 = 100%)\n    address public feeCollector;\n\n    // Listing structure\n    struct Listing {\n        uint256 listingId;\n        address seller;\n        string gameItemId;\n        uint256 quantity;\n        uint256 price; // Price per unit in wei\n        uint256 listedAt;\n        bool active;\n    }\n\n    // History of sold items for price tracking\n    struct SaleRecord {\n        uint256 timestamp;\n        uint256 price;\n        uint256 quantity;\n    }\n\n    // Market statistics\n    struct MarketStats {\n        uint256 totalVolume; // Total volume traded\n        uint256 highestPrice; // Highest price ever sold\n        uint256 lowestPrice; // Lowest price ever sold (if not 0)\n        uint256 lastSoldPrice; // Last sold price\n        uint256 numberOfSales; // Number of completed sales\n        uint256 totalListings; // Total times listed\n        uint256 currentListings; // Current active listings count\n        uint256 avgSoldPrice; // Average selling price (rolling)\n    }\n\n    // Mappings\n    mapping(uint256 => Listing) public listings;\n    mapping(address => uint256[]) public sellerListings;\n    mapping(string => MarketStats) public gameItemStats;\n    mapping(string => SaleRecord[]) public gameItemSaleHistory;\n\n    mapping(string => uint256) public lowestPriceListingForGameItem;\n\n    // Track unique game items that are listed\n    mapping(string => bool) public listedGameItems;\n    string[] public uniqueGameItemIds;\n    \n    mapping(address => mapping(string => uint256)) private userGameItemEscrow;\n\n    // Events\n    event ItemListed(\n        uint256 indexed listingId,\n        address indexed seller,\n        string gameItemId,\n        uint256 price,\n        uint256 quantity\n    );\n    event ListingCancelled(uint256 indexed listingId, address indexed seller);\n    event ItemSold(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed buyer,\n        string gameItemId,\n        uint256 price,\n        uint256 quantity\n    );\n    event MarketplaceFeeUpdated(uint256 newFeePercentage);\n    event FeeCollectorUpdated(address newFeeCollector);\n    event PriceChanged(uint256 indexed listingId, uint256 oldPrice, uint256 newPrice);\n\n    /**\n     * @dev Constructor to initialize the marketplace with required contract addresses\n     * @param _gameSave Address of the game save contract\n     */\n    constructor(address _gameSave) Ownable(msg.sender) {\n        require(_gameSave != address(0), \"Invalid GameSave address\");\n\n        gameSave = GameSave(_gameSave);\n\n        feeCollector = msg.sender;\n    }\n\n    /**\n     * @dev List a game item on the marketplace\n     * @param gameItemId The ID of the game item as used in the game\n     * @param quantity The quantity of the item to list\n     * @param price The price per unit in MON (wei)\n     */\n    function listGameItem(\n        string memory gameItemId,\n        uint256 quantity,\n        uint256 price\n    ) external whenNotPaused nonReentrant {\n        require(quantity > 0, \"Quantity must be greater than 0\");\n        require(price > 0, \"Price must be greater than 0\");\n\n        // Verify that the user has the item in their inventory\n        bool hasItem = _verifyGameItemOwnership(msg.sender, gameItemId, quantity);\n        require(hasItem, \"You don't own enough of this item\");\n\n        // Remove the item from the user's inventory\n        bool removed = _removeItemFromInventory(msg.sender, gameItemId, quantity);\n        require(removed, \"Failed to remove item from inventory\");\n\n        // Add the item to escrow\n        _escrowGameItem(msg.sender, gameItemId, quantity);\n\n        // Create the listing\n        _listingIds.increment();\n        uint256 newListingId = _listingIds.current();\n\n        listings[newListingId] = Listing({\n            listingId: newListingId,\n            seller: msg.sender,\n            gameItemId: gameItemId,\n            quantity: quantity,\n            price: price,\n            listedAt: block.timestamp,\n            active: true\n        });\n\n        // Add to seller's listings\n        sellerListings[msg.sender].push(newListingId);\n\n        // Update market stats\n        gameItemStats[gameItemId].totalListings++;\n        gameItemStats[gameItemId].currentListings++;\n\n        // Track unique game item if not already tracked\n        if (!listedGameItems[gameItemId]) {\n            listedGameItems[gameItemId] = true;\n            uniqueGameItemIds.push(gameItemId);\n        }\n\n        // Update lowest price listing if applicable\n        _updateLowestPriceGameItemListing(gameItemId, newListingId, price);\n\n        emit ItemListed(newListingId, msg.sender, gameItemId, price, quantity);\n    }\n\n\n\n    /**\n     * @dev Cancel a listing\n     * @param listingId The ID of the listing to cancel\n     */\n    function cancelListing(uint256 listingId) external nonReentrant {\n        Listing storage listing = listings[listingId];\n\n        require(listing.active, \"Listing is not active\");\n        require(listing.seller == msg.sender || owner() == msg.sender, \"Not authorized\");\n\n        listing.active = false;\n\n        // Update market stats\n        gameItemStats[listing.gameItemId].currentListings--;\n\n        // Check if this was the last listing for this item and remove from unique items if so\n        if (gameItemStats[listing.gameItemId].currentListings == 0) {\n            _removeUniqueGameItem(listing.gameItemId);\n        }\n\n        // Update lowest price listing if this was the lowest price\n        if (lowestPriceListingForGameItem[listing.gameItemId] == listingId) {\n            _recalculateLowestPriceGameItemListing(listing.gameItemId);\n        }\n\n        // Release item from escrow\n        bool released = _releaseGameItemFromEscrow(listing.seller, listing.gameItemId, listing.quantity);\n        require(released, \"Failed to release item from escrow\");\n\n        // Add item back to seller's inventory\n        _addItemToInventory(listing.seller, listing.gameItemId, listing.quantity);\n\n        emit ListingCancelled(listingId, msg.sender);\n    }\n\n    /**\n     * @dev Change the price of a listing\n     * @param listingId The ID of the listing\n     * @param newPrice The new price\n     */\n    function changeListingPrice(uint256 listingId, uint256 newPrice) external nonReentrant {\n        require(newPrice > 0, \"Price must be greater than 0\");\n\n        Listing storage listing = listings[listingId];\n\n        require(listing.active, \"Listing is not active\");\n        require(listing.seller == msg.sender, \"Not the seller\");\n\n        uint256 oldPrice = listing.price;\n        listing.price = newPrice;\n\n        // Update lowest price listing if necessary\n        if (lowestPriceListingForGameItem[listing.gameItemId] == listingId && newPrice > oldPrice) {\n            _recalculateLowestPriceGameItemListing(listing.gameItemId);\n        } else if (newPrice < _getLowestPriceForGameItem(listing.gameItemId)) {\n            _updateLowestPriceGameItemListing(listing.gameItemId, listingId, newPrice);\n        }\n\n        emit PriceChanged(listingId, oldPrice, newPrice);\n    }\n\n    /**\n     * @dev Buy multiple game items from the marketplace at once\n     * @param listingIds Array of listing IDs to purchase\n     * @param quantities Array of quantities to buy for each listing\n     */\n    function buyGameItems(uint256[] calldata listingIds, uint256[] calldata quantities) external payable whenNotPaused nonReentrant {\n        require(listingIds.length > 0, \"Must provide at least one listing\");\n        require(listingIds.length == quantities.length, \"Arrays length mismatch\");\n        \n        uint256 totalCost = 0;\n        \n        // Calculate total cost first\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            Listing storage listing = listings[listingIds[i]];\n            \n            require(listing.active, \"Listing is not active\");\n            require(quantities[i] > 0 && quantities[i] <= listing.quantity, \"Invalid quantity\");\n            require(listing.seller != msg.sender, \"Cannot buy your own listing\");\n            \n            totalCost += listing.price * quantities[i];\n        }\n        \n        // Check if buyer has sent enough MON\n        require(msg.value >= totalCost, \"Insufficient funds sent\");\n        \n        uint256 remainingValue = msg.value;\n        \n        // Process each purchase\n        for (uint256 i = 0; i < listingIds.length; i++) {\n            uint256 listingId = listingIds[i];\n            uint256 quantity = quantities[i];\n            Listing storage listing = listings[listingId];\n            \n            uint256 itemCost = listing.price * quantity;\n            uint256 fee = (itemCost * marketplaceFeePercentage) / 10000;\n            uint256 sellerAmount = itemCost - fee;\n            \n            // Transfer MON to seller and marketplace\n            (bool sellerTransferSuccess, ) = payable(listing.seller).call{value: sellerAmount}(\"\");\n            require(sellerTransferSuccess, \"MON transfer to seller failed\");\n            \n            (bool feeTransferSuccess, ) = payable(feeCollector).call{value: fee}(\"\");\n            require(feeTransferSuccess, \"Fee transfer failed\");\n            \n            remainingValue -= itemCost;\n            \n            // Update listing\n            if (quantity == listing.quantity) {\n                listing.active = false;\n                gameItemStats[listing.gameItemId].currentListings--;\n                \n                // Check if this was the last listing for this item and remove from unique items if so\n                if (gameItemStats[listing.gameItemId].currentListings == 0) {\n                    _removeUniqueGameItem(listing.gameItemId);\n                }\n                \n                // Update lowest price listing if this was the lowest price\n                if (lowestPriceListingForGameItem[listing.gameItemId] == listingId) {\n                    _recalculateLowestPriceGameItemListing(listing.gameItemId);\n                }\n            } else {\n                listing.quantity -= quantity;\n            }\n            \n            // Release item from escrow\n            bool updated = _releaseGameItemFromEscrow(listing.seller, listing.gameItemId, quantity);\n            require(updated, \"Failed to release item from escrow\");\n            \n            // Add item to buyer's inventory\n            updated = _addItemToInventory(msg.sender, listing.gameItemId, quantity);\n            require(updated, \"Failed to add item to buyer's inventory\");\n            \n            // Record sale in history\n            SaleRecord memory record = SaleRecord({ timestamp: block.timestamp, price: listing.price, quantity: quantity });\n            gameItemSaleHistory[listing.gameItemId].push(record);\n            \n            // Update market stats\n            MarketStats storage stats = gameItemStats[listing.gameItemId];\n            stats.totalVolume += itemCost;\n            stats.numberOfSales++;\n            stats.lastSoldPrice = listing.price;\n            \n            // Update highest/lowest price if applicable\n            if (listing.price > stats.highestPrice) {\n                stats.highestPrice = listing.price;\n            }\n            if (stats.lowestPrice == 0 || listing.price < stats.lowestPrice) {\n                stats.lowestPrice = listing.price;\n            }\n            \n            // Update average price (simple rolling average)\n            stats.avgSoldPrice = (stats.avgSoldPrice * (stats.numberOfSales - 1) + listing.price) / stats.numberOfSales;\n            \n            emit ItemSold(listingId, listing.seller, msg.sender, listing.gameItemId, listing.price, quantity);\n        }\n        \n        // Refund excess MON if any\n        if (remainingValue > 0) {\n            (bool refundSuccess, ) = payable(msg.sender).call{value: remainingValue}(\"\");\n            require(refundSuccess, \"Refund of excess MON failed\");\n        }\n    }\n\n    /**\n     * @dev Set the marketplace fee percentage (in basis points)\n     * @param newFeePercentage The new fee percentage (100 = 1%, 10000 = 100%)\n     */\n    function setMarketplaceFee(uint256 newFeePercentage) external onlyOwner {\n        require(newFeePercentage <= 3000, \"Fee too high\"); // Max 30%\n        marketplaceFeePercentage = newFeePercentage;\n        emit MarketplaceFeeUpdated(newFeePercentage);\n    }\n\n    /**\n     * @dev Set the fee collector address\n     * @param newFeeCollector The new fee collector address\n     */\n    function setFeeCollector(address newFeeCollector) external onlyOwner {\n        require(newFeeCollector != address(0), \"Invalid address\");\n        feeCollector = newFeeCollector;\n        emit FeeCollectorUpdated(newFeeCollector);\n    }\n\n    /**\n     * @dev Pause the marketplace\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpause the marketplace\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // ==================== View Functions ====================\n\n    /**\n     * @dev Get all listings for a seller\n     * @param seller The address of the seller\n     * @return listingIds Array of listing IDs\n     */\n    function getSellerListings(address seller) external view returns (uint256[] memory) {\n        return sellerListings[seller];\n    }\n\n    /**\n     * @dev Get all active listings for a specific game item\n     * @param gameItemId The game item ID\n     * @return activeListingIds Array of active listing IDs\n     */\n    function getActiveGameItemListings(string memory gameItemId) external view returns (uint256[] memory) {\n        uint256 count = gameItemStats[gameItemId].currentListings;\n        uint256[] memory activeListingIds = new uint256[](count);\n\n        uint256 currentIndex = 0;\n        uint256 totalListings = _listingIds.current();\n\n        for (uint256 i = 1; i <= totalListings && currentIndex < count; i++) {\n            Listing storage listing = listings[i];\n            if (\n                listing.active &&\n                keccak256(bytes(listing.gameItemId)) == keccak256(bytes(gameItemId))\n            ) {\n                activeListingIds[currentIndex] = i;\n                currentIndex++;\n            }\n        }\n\n        return activeListingIds;\n    }\n\n\n\n    /**\n     * @dev Get the price history for a game item\n     * @param gameItemId The game item ID\n     * @param limit The maximum number of records to return (0 for all)\n     * @return records Array of price records\n     */\n    function getGameItemPriceHistory(\n        string memory gameItemId,\n        uint256 limit\n    ) external view returns (SaleRecord[] memory) {\n        SaleRecord[] storage history = gameItemSaleHistory[gameItemId];\n        uint256 historyLength = history.length;\n\n        if (limit == 0 || limit > historyLength) {\n            limit = historyLength;\n        }\n\n        SaleRecord[] memory records = new SaleRecord[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            // Get the most recent records first\n            records[i] = history[historyLength - limit + i];\n        }\n\n        return records;\n    }\n\n\n\n    /**\n     * @dev Get the lowest priced listing for a game item\n     * @param gameItemId The game item ID\n     * @return listingId The listing ID with the lowest price\n     * @return price The lowest price\n     */\n    function getLowestPriceListingForGameItem(\n        string memory gameItemId\n    ) external view returns (uint256 listingId, uint256 price) {\n        listingId = lowestPriceListingForGameItem[gameItemId];\n\n        if (listingId != 0 && listings[listingId].active) {\n            price = listings[listingId].price;\n        } else {\n            price = 0;\n        }\n\n        return (listingId, price);\n    }\n\n\n\n    /**\n     * @dev Get all unique game items that are currently listed in the marketplace\n     * @return uniqueGameItems Array of unique game item IDs\n     */\n    function getAllUniqueGameItems() external view returns (string[] memory) {\n        // Simply return the tracked unique game items\n        return uniqueGameItemIds;\n    }\n\n\n\n    /**\n     * @dev Get detailed information about a specific listing\n     * @param listingId The ID of the listing to retrieve\n     * @return The complete Listing struct containing all listing details\n     */\n    function getListingById(uint256 listingId) external view returns (Listing memory) {\n        require(listingId > 0 && listingId <= _listingIds.current(), \"Invalid listing ID\");\n        return listings[listingId];\n    }\n\n    /**\n     * @dev Get all unique items with their lowest prices\n     * @return gameItems Array of game item IDs\n     * @return gameItemPrices Array of lowest prices for each game item\n     */\n    function getAllUniqueItemsWithPrices()\n        external\n        view\n        returns (\n            string[] memory gameItems,\n            uint256[] memory gameItemPrices\n        )\n    {\n        // Get all unique game items\n        gameItems = this.getAllUniqueGameItems();\n        gameItemPrices = new uint256[](gameItems.length);\n\n        // Get lowest price for each game item\n        for (uint256 i = 0; i < gameItems.length; i++) {\n            (, uint256 price) = this.getLowestPriceListingForGameItem(gameItems[i]);\n            gameItemPrices[i] = price;\n        }\n\n        return (gameItems, gameItemPrices);\n    }\n\n    // ==================== Internal Functions ====================\n\n    /**\n     * @dev Verify if a user owns a game item\n     * @param user The user address\n     * @param gameItemId The game item ID\n     * @param quantity The quantity to verify\n     * @return Whether the user owns the specified quantity of the item\n     */\n    function _verifyGameItemOwnership(\n        address user,\n        string memory gameItemId,\n        uint256 quantity\n    ) internal view returns (bool) {\n        // Get only the inventory data needed for verification\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\n        uint256 ownedQuantity = 0;\n\n        // Sum up the quantity of matching items\n        for (uint i = 0; i < inventory.length; i++) {\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\n                ownedQuantity += inventory[i].quantity;\n            }\n        }\n\n        return ownedQuantity >= quantity;\n    }\n\n    /**\n     * @dev Helper function to get only the inventory data needed for ownership verification\n     * @param user The user address\n     * @return inventory Array of user's inventory items\n     */\n    function _getUserInventory(address user) internal view returns (GameSave.InventoryItem[] memory) {\n        // Check if the user has a save in the GameSave contract\n        bool hasSave = gameSave.hasSaveData(user);\n\n        // If no save exists or the user isn't the caller, return an empty inventory\n        if (!hasSave || user != msg.sender) {\n            return new GameSave.InventoryItem[](0);\n        }\n\n        // Load only the inventory data from the GameSave contract\n        (\n            ,\n            ,\n            ,\n            // version (ignored)\n            // timestamp (ignored)\n            // player data (ignored)\n            GameSave.InventoryItem[] memory inventory, // farming data (ignored)\n            ,\n\n        ) = // map changes (ignored)\n            gameSave.loadGame(user);\n\n        return inventory;\n    }\n\n    /**\n     * @dev Remove a game item from a user's inventory when it's listed on the marketplace\n     * @param user The user address\n     * @param gameItemId The game item ID\n     * @param quantity The quantity to remove\n     * @return Whether the operation was successful\n     */\n    function _removeItemFromInventory(\n        address user,\n        string memory gameItemId,\n        uint256 quantity\n    ) internal returns (bool) {\n        // Get user's current inventory\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\n        if (inventory.length == 0) return false;\n\n        // Find the item in inventory and create an updated inventory\n        uint256 slotToUpdate = type(uint256).max;\n        uint256 newQuantity = 0;\n\n        for (uint i = 0; i < inventory.length; i++) {\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\n                if (inventory[i].quantity >= quantity) {\n                    slotToUpdate = inventory[i].slotIndex;\n                    newQuantity = inventory[i].quantity - quantity;\n                    break;\n                }\n            }\n        }\n\n        if (slotToUpdate == type(uint256).max) return false;\n\n        // Create updated inventory array with reduced quantity\n        GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length);\n        uint updatedItemCount = 0;\n\n        for (uint i = 0; i < inventory.length; i++) {\n            if (inventory[i].slotIndex == slotToUpdate) {\n                if (newQuantity > 0) {\n                    updatedInventory[updatedItemCount] = GameSave.InventoryItem({\n                        slotIndex: slotToUpdate,\n                        itemId: gameItemId,\n                        quantity: newQuantity\n                    });\n                    updatedItemCount++;\n                }\n            } else {\n                updatedInventory[updatedItemCount] = inventory[i];\n                updatedItemCount++;\n            }\n        }\n\n        // Create the final array with the correct length\n        GameSave.InventoryItem[] memory finalInventory = new GameSave.InventoryItem[](updatedItemCount);\n        for (uint i = 0; i < updatedItemCount; i++) {\n            finalInventory[i] = updatedInventory[i];\n        }\n\n        // Save the updated inventory back to GameSave\n        return _updateUserInventory(user, finalInventory);\n    }\n\n    /**\n     * @dev Add a game item back to a user's inventory when a listing is cancelled or expired\n     * @param user The user address\n     * @param gameItemId The game item ID\n     * @param quantity The quantity to add back\n     * @return Whether the operation was successful\n     */\n    function _addItemToInventory(\n        address user,\n        string memory gameItemId,\n        uint256 quantity\n    ) internal returns (bool) {\n        // Get user's current inventory\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\n        \n        // Try to find if the item already exists to stack it\n        uint256 slotToUpdate = type(uint256).max;\n        uint256 newQuantity = 0;\n\n        for (uint i = 0; i < inventory.length; i++) {\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\n                slotToUpdate = inventory[i].slotIndex;\n                newQuantity = inventory[i].quantity + quantity;\n                break;\n            }\n        }\n\n        if (slotToUpdate != type(uint256).max) {\n            // Update existing item\n            GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length);\n            \n            for (uint i = 0; i < inventory.length; i++) {\n                if (inventory[i].slotIndex == slotToUpdate) {\n                    updatedInventory[i] = GameSave.InventoryItem({\n                        slotIndex: slotToUpdate,\n                        itemId: gameItemId,\n                        quantity: newQuantity\n                    });\n                } else {\n                    updatedInventory[i] = inventory[i];\n                }\n            }\n            \n            return _updateUserInventory(user, updatedInventory);\n        } else {\n            // Add as new item to the first empty slot or to the end\n            uint256 newSlot = 0;\n            bool foundEmptySlot = false;\n            \n            // Check for empty slots (assuming slots are sequential)\n            if (inventory.length > 0) {\n                // Create a mapping of used slots\n                bool[] memory usedSlots = new bool[](100); // Assuming max 100 slots\n                \n                for (uint i = 0; i < inventory.length; i++) {\n                    if (inventory[i].slotIndex < 100) {\n                        usedSlots[inventory[i].slotIndex] = true;\n                    }\n                }\n                \n                // Find first empty slot\n                for (uint i = 0; i < 100; i++) {\n                    if (!usedSlots[i]) {\n                        newSlot = i;\n                        foundEmptySlot = true;\n                        break;\n                    }\n                }\n            }\n            \n            if (!foundEmptySlot) {\n                // If no empty slot found, add to the end\n                newSlot = inventory.length > 0 ? inventory.length : 0;\n            }\n            \n            // Create updated inventory with new item\n            GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length + 1);\n            \n            for (uint i = 0; i < inventory.length; i++) {\n                updatedInventory[i] = inventory[i];\n            }\n            \n            updatedInventory[inventory.length] = GameSave.InventoryItem({\n                slotIndex: newSlot,\n                itemId: gameItemId,\n                quantity: quantity\n            });\n            \n            return _updateUserInventory(user, updatedInventory);\n        }\n    }\n\n    /**\n     * @dev Update a user's inventory in the GameSave contract\n     * @param user The user address\n     * @param inventory The new inventory array\n     * @return Whether the operation was successful\n     */\n    function _updateUserInventory(\n        address user,\n        GameSave.InventoryItem[] memory inventory\n    ) internal returns (bool) {\n        try gameSave.updateInventory(user, inventory) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Add a game item to the marketplace's escrow when it's listed\n     * @param user The user address\n     * @param gameItemId The game item ID\n     * @param quantity The quantity to add\n     */\n    function _escrowGameItem(\n        address user,\n        string memory gameItemId,\n        uint256 quantity\n    ) internal {\n        userGameItemEscrow[user][gameItemId] += quantity;\n    }\n\n    /**\n     * @dev Release a game item from escrow back to user when a listing is cancelled\n     * @param user The user address\n     * @param gameItemId The game item ID\n     * @param quantity The quantity to release\n     * @return Whether the operation was successful\n     */\n    function _releaseGameItemFromEscrow(\n        address user,\n        string memory gameItemId,\n        uint256 quantity\n    ) internal returns (bool) {\n        if (userGameItemEscrow[user][gameItemId] < quantity) {\n            return false;\n        }\n        \n        userGameItemEscrow[user][gameItemId] -= quantity;\n        return true;\n    }\n\n    /**\n     * @dev Check how many items a user has in escrow\n     * @param user The user address\n     * @param gameItemId The game item ID\n     * @return The quantity of the item in escrow\n     */\n    function getGameItemEscrowBalance(\n        address user,\n        string memory gameItemId\n    ) external view returns (uint256) {\n        return userGameItemEscrow[user][gameItemId];\n    }\n\n    /**\n     * @dev Update the lowest priced listing for a game item\n     * @param gameItemId The game item ID\n     * @param listingId The listing ID\n     * @param price The price\n     */\n    function _updateLowestPriceGameItemListing(string memory gameItemId, uint256 listingId, uint256 price) internal {\n        uint256 currentLowestListingId = lowestPriceListingForGameItem[gameItemId];\n\n        if (\n            currentLowestListingId == 0 ||\n            !listings[currentLowestListingId].active ||\n            price < listings[currentLowestListingId].price\n        ) {\n            lowestPriceListingForGameItem[gameItemId] = listingId;\n        }\n    }\n\n\n\n    /**\n     * @dev Recalculate the lowest priced listing for a game item\n     * @param gameItemId The game item ID\n     */\n    function _recalculateLowestPriceGameItemListing(string memory gameItemId) internal {\n        uint256 totalListings = _listingIds.current();\n        uint256 lowestPrice = type(uint256).max;\n        uint256 lowestPriceId = 0;\n\n        for (uint256 i = 1; i <= totalListings; i++) {\n            Listing storage listing = listings[i];\n            if (\n                listing.active &&\n                keccak256(bytes(listing.gameItemId)) == keccak256(bytes(gameItemId)) &&\n                listing.price < lowestPrice\n            ) {\n                lowestPrice = listing.price;\n                lowestPriceId = i;\n            }\n        }\n\n        lowestPriceListingForGameItem[gameItemId] = lowestPriceId;\n    }\n\n\n\n    /**\n     * @dev Get the lowest price for a game item\n     * @param gameItemId The game item ID\n     * @return The lowest price\n     */\n    function _getLowestPriceForGameItem(string memory gameItemId) internal view returns (uint256) {\n        uint256 listingId = lowestPriceListingForGameItem[gameItemId];\n        if (listingId != 0 && listings[listingId].active) {\n            return listings[listingId].price;\n        }\n        return type(uint256).max;\n    }\n\n\n\n    /**\n     * @dev Remove a game item from the unique items tracking when it has no active listings\n     * @param gameItemId The game item ID to remove\n     */\n    function _removeUniqueGameItem(string memory gameItemId) internal {\n        if (listedGameItems[gameItemId]) {\n            listedGameItems[gameItemId] = false;\n\n            // Find and remove the item from the uniqueGameItemIds array\n            for (uint256 i = 0; i < uniqueGameItemIds.length; i++) {\n                if (keccak256(bytes(uniqueGameItemIds[i])) == keccak256(bytes(gameItemId))) {\n                    // Move the last element to the position of the removed element\n                    if (i < uniqueGameItemIds.length - 1) {\n                        uniqueGameItemIds[i] = uniqueGameItemIds[uniqueGameItemIds.length - 1];\n                    }\n                    // Remove the last element\n                    uniqueGameItemIds.pop();\n                    break;\n                }\n            }\n        }\n    }\n\n\n}\n"
    },
    "openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}