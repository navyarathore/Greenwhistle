{
  "address": "0x5438078C4Dd88Dedb440735D9b7C218dcE816407",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameSave",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ListingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "MarketplaceFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "listingIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "name": "buyGameItems",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeListingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameItemSaleHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "gameItemStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVolume",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "highestPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lowestPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastSoldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfSales",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalListings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentListings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "avgSoldPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        }
      ],
      "name": "getActiveGameItemListings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUniqueItemsWithPrices",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "gameItems",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gameItemQuantity",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gameItemPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        }
      ],
      "name": "getGameItemEscrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getGameItemPriceHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct VolatileMarketplace.SaleRecord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        }
      ],
      "name": "getLowestPriceListingForGameItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        }
      ],
      "name": "getTotalQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listGameItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "listedGameItems",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "lowestPriceListingForGameItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplaceFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerListings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "setMarketplaceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniqueGameItemIds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b20c6deec5add12bb743ff0d0d79eab5b480b8dd28e26a9c9fb10a9a2e972b4",
  "receipt": {
    "to": null,
    "from": "0x19C19ba61e9BC0568198B6873Bd59181D86d79D4",
    "contractAddress": "0x5438078C4Dd88Dedb440735D9b7C218dcE816407",
    "transactionIndex": 83,
    "gasUsed": "3879206",
    "logsBloom": "0x
    "blockHash": "0x391aabad31d00a907b7f5560282ff7967a91768dee306dd3ad2f3bb811aeddd8",
    "transactionHash": "0x6b20c6deec5add12bb743ff0d0d79eab5b480b8dd28e26a9c9fb10a9a2e972b4",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 14803339,
        "transactionHash": "0x6b20c6deec5add12bb743ff0d0d79eab5b480b8dd28e26a9c9fb10a9a2e972b4",
        "address": "0x5438078C4Dd88Dedb440735D9b7C218dcE816407",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000019c19ba61e9bc0568198b6873bd59181d86d79d4"
        ],
        "data": "0x",
        "logIndex": 239,
        "blockHash": "0x391aabad31d00a907b7f5560282ff7967a91768dee306dd3ad2f3bb811aeddd8"
      }
    ],
    "blockNumber": 14803339,
    "cumulativeGasUsed": "22371167",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x032b4EcfFB926DF1611224e76812cD870fb8E0Bb"
  ],
  "numDeployments": 2,
  "solcInputHash": "9894082def3c76456efce61bae5032a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameSave\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"MarketplaceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"listingIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"buyGameItems\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameItemSaleHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gameItemStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowestPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSoldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalListings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentListings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgSoldPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"}],\"name\":\"getActiveGameItemListings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUniqueItemsWithPrices\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"gameItems\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameItemQuantity\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameItemPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"}],\"name\":\"getGameItemEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getGameItemPriceHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct VolatileMarketplace.SaleRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"}],\"name\":\"getLowestPriceListingForGameItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"}],\"name\":\"getTotalQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listGameItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"listedGameItems\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lowestPriceListingForGameItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setMarketplaceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueGameItemIds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A marketplace contract for trading in-game items with supply and demand dynamics similar to the Steam marketplace. All transactions are conducted with native MON.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"buyGameItems(uint256[],uint256[])\":{\"details\":\"Buy multiple game items from the marketplace at once\",\"params\":{\"listingIds\":\"Array of listing IDs to purchase\",\"quantities\":\"Array of quantities to buy for each listing\"}},\"cancelListing(uint256)\":{\"details\":\"Cancel a listing\",\"params\":{\"listingId\":\"The ID of the listing to cancel\"}},\"changeListingPrice(uint256,uint256)\":{\"details\":\"Change the price of a listing\",\"params\":{\"listingId\":\"The ID of the listing\",\"newPrice\":\"The new price\"}},\"constructor\":{\"details\":\"Constructor to initialize the marketplace with required contract addresses\",\"params\":{\"_gameSave\":\"Address of the game save contract\"}},\"getActiveGameItemListings(string)\":{\"details\":\"Get all active listings for a specific game item\",\"params\":{\"gameItemId\":\"The game item ID\"},\"returns\":{\"_0\":\"activeListingIds Array of active listing IDs\"}},\"getAllUniqueItemsWithPrices()\":{\"details\":\"Get all unique items with their lowest prices\",\"returns\":{\"gameItemPrices\":\"Array of lowest prices for each game item\",\"gameItemQuantity\":\"Array of quantities for each game item\",\"gameItems\":\"Array of game item IDs\"}},\"getGameItemEscrowBalance(address,string)\":{\"details\":\"Check how many items a user has in escrow\",\"params\":{\"gameItemId\":\"The game item ID\",\"user\":\"The user address\"},\"returns\":{\"_0\":\"The quantity of the item in escrow\"}},\"getGameItemPriceHistory(string,uint256)\":{\"details\":\"Get the price history for a game item\",\"params\":{\"gameItemId\":\"The game item ID\",\"limit\":\"The maximum number of records to return (0 for all)\"},\"returns\":{\"_0\":\"records Array of price records\"}},\"getLowestPriceListingForGameItem(string)\":{\"details\":\"Get the lowest priced listing for a game item\",\"params\":{\"gameItemId\":\"The game item ID\"},\"returns\":{\"listingId\":\"The listing ID with the lowest price\",\"price\":\"The lowest price\"}},\"listGameItem(string,uint256,uint256)\":{\"details\":\"List a game item on the marketplace\",\"params\":{\"gameItemId\":\"The ID of the game item as used in the game\",\"price\":\"The price per unit in MON (wei)\",\"quantity\":\"The quantity of the item to list\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the marketplace\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeCollector(address)\":{\"details\":\"Set the fee collector address\",\"params\":{\"newFeeCollector\":\"The new fee collector address\"}},\"setMarketplaceFee(uint256)\":{\"details\":\"Set the marketplace fee percentage (in basis points)\",\"params\":{\"newFeePercentage\":\"The new fee percentage (100 = 1%, 10000 = 100%)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the marketplace\"}},\"title\":\"VolatileMarketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VolatileMarketplace.sol\":\"VolatileMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/GameSave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title GameSave\\n * @dev Contract for saving and loading game data to/from the blockchain\\n */\\ncontract GameSave is Ownable, ReentrancyGuard, Pausable {\\n    // Game data structure\\n    struct SaveData {\\n        uint256 version;\\n        uint256 timestamp;\\n        // Player data\\n        PlayerData player;\\n        // Arrays for different game elements\\n        InventoryItem[] inventory;\\n        FarmingData[] farming;\\n        MapChange[] mapChanges;\\n    }\\n\\n    // Player data structure\\n    struct PlayerData {\\n        uint256 positionX;\\n        uint256 positionY;\\n        uint256 health;\\n        uint256 selectedHotbarSlot;\\n    }\\n\\n    // Inventory item structure\\n    struct InventoryItem {\\n        uint256 slotIndex;\\n        string itemId;\\n        uint256 quantity;\\n    }\\n\\n    // Farming data structure\\n    struct FarmingData {\\n        uint256 positionX;\\n        uint256 positionY;\\n        string cropId;\\n        uint256 growthStage;\\n        uint256 plantedTime;\\n        uint256 lastWateredTime;\\n    }\\n\\n    // Map change structure\\n    struct MapChange {\\n        string layer;\\n        uint256 positionX;\\n        uint256 positionY;\\n        int256 tileIndex;\\n    }\\n\\n    // Mapping from address to save data\\n    mapping(address => SaveData) private gameSaves;\\n    mapping(address => bool) private hasSave;\\n\\n    mapping(address => bool) private marketplaceApprovals;\\n\\n    // Events\\n    event GameSaved(address indexed player, uint256 timestamp);\\n    event SaveDeleted(address indexed player);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Save game data to the blockchain\\n     */\\n    function saveGame(\\n        address user,\\n        uint256 _version,\\n        uint256 _timestamp,\\n        PlayerData calldata _player,\\n        InventoryItem[] calldata _inventory,\\n        FarmingData[] calldata _farming,\\n        MapChange[] calldata _mapChanges\\n    ) external whenNotPaused nonReentrant {\\n        SaveData storage saveData = gameSaves[user];\\n\\n        saveData.version = _version;\\n        saveData.timestamp = _timestamp;\\n        saveData.player = _player;\\n\\n        // Clear existing arrays and replace with new data\\n        delete saveData.inventory;\\n        delete saveData.farming;\\n        delete saveData.mapChanges;\\n\\n        // Save inventory items\\n        for (uint i = 0; i < _inventory.length; i++) {\\n            saveData.inventory.push(_inventory[i]);\\n        }\\n\\n        // Save farming data\\n        for (uint i = 0; i < _farming.length; i++) {\\n            saveData.farming.push(_farming[i]);\\n        }\\n\\n        // Save map changes\\n        for (uint i = 0; i < _mapChanges.length; i++) {\\n            saveData.mapChanges.push(_mapChanges[i]);\\n        }\\n\\n        hasSave[user] = true;\\n\\n        emit GameSaved(user, _timestamp);\\n    }\\n\\n    function loadGame(address user)\\n        external\\n        view\\n        whenNotPaused\\n        returns (\\n            uint256 version,\\n            uint256 timestamp,\\n            PlayerData memory player,\\n            InventoryItem[] memory inventory,\\n            FarmingData[] memory farming,\\n            MapChange[] memory mapChanges\\n        )\\n    {\\n        require(hasSave[user], \\\"No save data found for this address\\\");\\n\\n        SaveData storage saveData = gameSaves[user];\\n\\n        return (\\n            saveData.version,\\n            saveData.timestamp,\\n            saveData.player,\\n            saveData.inventory,\\n            saveData.farming,\\n            saveData.mapChanges\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the player's inventory\\n     * @param user The address of the player\\n     * @param _inventory The new inventory items\\n     */\\n    function updateInventory(\\n        address user,\\n        InventoryItem[] calldata _inventory\\n    ) external whenNotPaused nonReentrant {\\n        require(marketplaceApprovals[msg.sender], \\\"Marketplace approval required\\\");\\n        require(hasSave[user], \\\"No save data found for this address\\\");\\n\\n        SaveData storage saveData = gameSaves[user];\\n\\n        // Clear existing inventory and replace with new data\\n        delete saveData.inventory;\\n\\n        // Save inventory items\\n        for (uint i = 0; i < _inventory.length; i++) {\\n            saveData.inventory.push(_inventory[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if the player has a saved game\\n     * @return Whether the player has a saved game\\n     */\\n    function hasSaveData(address user) external view returns (bool) {\\n        return hasSave[user];\\n    }\\n\\n    /**\\n     * @dev Delete the current save\\n     */\\n    function deleteSaveData(address user) external whenNotPaused nonReentrant {\\n        require(hasSave[user], \\\"No save data found for this address\\\");\\n\\n        delete gameSaves[user];\\n        hasSave[user] = false;\\n\\n        emit SaveDeleted(user);\\n    }\\n\\n    /**\\n     * @dev Set marketplace approval for a user\\n     * @param user The address of the user\\n     * @param approved Whether the user is approved for marketplace actions\\n     */\\n    function setMarketplaceApproval(\\n        address user,\\n        bool approved\\n    ) external onlyOwner {\\n        marketplaceApprovals[user] = approved;\\n    }\\n\\n    /**\\n     * @dev Check if a user is approved for marketplace actions\\n     * @param user The address of the user\\n     * @return Whether the user is approved for marketplace actions\\n     */\\n    function isMarketplaceApproved(\\n        address user\\n    ) external view returns (bool) {\\n        return marketplaceApprovals[user];\\n    }\\n\\n    /**\\n     * @dev Pause the contract (only owner)\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract (only owner)\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xb2afd3b29a74ddecf540545f0ae581d226192da6890bd3239a2ac6622955e56d\",\"license\":\"MIT\"},\"contracts/VolatileMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport { Counters } from \\\"openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./GameSave.sol\\\";\\n\\n/**\\n * @title VolatileMarketplace\\n * @dev A marketplace contract for trading in-game items with supply and demand dynamics\\n * similar to the Steam marketplace. All transactions are conducted with native MON.\\n */\\ncontract VolatileMarketplace is Ownable, ReentrancyGuard, Pausable {\\n    using Counters for Counters.Counter;\\n\\n    // Contract dependencies\\n    GameSave private gameSave;\\n\\n    // Listing counter\\n    Counters.Counter private _listingIds;\\n\\n    // Fee structure\\n    uint256 public marketplaceFeePercentage = 250; // 2.5% (using basis points: 10000 = 100%)\\n    address public feeCollector;\\n\\n    // Listing structure\\n    struct Listing {\\n        uint256 listingId;\\n        address seller;\\n        string gameItemId;\\n        uint256 quantity;\\n        uint256 price; // Price per unit in wei\\n        uint256 listedAt;\\n        bool active;\\n    }\\n\\n    // History of sold items for price tracking\\n    struct SaleRecord {\\n        uint256 timestamp;\\n        uint256 price;\\n        uint256 quantity;\\n    }\\n\\n    // Market statistics\\n    struct MarketStats {\\n        uint256 totalVolume; // Total volume traded\\n        uint256 highestPrice; // Highest price ever sold\\n        uint256 lowestPrice; // Lowest price ever sold (if not 0)\\n        uint256 lastSoldPrice; // Last sold price\\n        uint256 numberOfSales; // Number of completed sales\\n        uint256 totalListings; // Total times listed\\n        uint256 currentListings; // Current active listings count\\n        uint256 avgSoldPrice; // Average selling price (rolling)\\n    }\\n\\n    // Mappings\\n    mapping(uint256 => Listing) public listings;\\n    mapping(address => uint256[]) public sellerListings;\\n    mapping(string => MarketStats) public gameItemStats;\\n    mapping(string => SaleRecord[]) public gameItemSaleHistory;\\n\\n    mapping(string => uint256) public lowestPriceListingForGameItem;\\n\\n    // Track unique game items that are listed\\n    mapping(string => bool) public listedGameItems;\\n    string[] public uniqueGameItemIds;\\n    \\n    mapping(address => mapping(string => uint256)) private userGameItemEscrow;\\n\\n    // Events\\n    event ItemListed(\\n        uint256 indexed listingId,\\n        address indexed seller,\\n        string gameItemId,\\n        uint256 price,\\n        uint256 quantity\\n    );\\n    event ListingCancelled(uint256 indexed listingId, address indexed seller);\\n    event ItemSold(\\n        uint256 indexed listingId,\\n        address indexed seller,\\n        address indexed buyer,\\n        string gameItemId,\\n        uint256 price,\\n        uint256 quantity\\n    );\\n    event MarketplaceFeeUpdated(uint256 newFeePercentage);\\n    event FeeCollectorUpdated(address newFeeCollector);\\n    event PriceChanged(uint256 indexed listingId, uint256 oldPrice, uint256 newPrice);\\n\\n    /**\\n     * @dev Constructor to initialize the marketplace with required contract addresses\\n     * @param _gameSave Address of the game save contract\\n     */\\n    constructor(address _gameSave) Ownable(msg.sender) {\\n        require(_gameSave != address(0), \\\"Invalid GameSave address\\\");\\n\\n        gameSave = GameSave(_gameSave);\\n\\n        feeCollector = msg.sender;\\n    }\\n\\n    /**\\n     * @dev List a game item on the marketplace\\n     * @param gameItemId The ID of the game item as used in the game\\n     * @param quantity The quantity of the item to list\\n     * @param price The price per unit in MON (wei)\\n     */\\n    function listGameItem(\\n        string memory gameItemId,\\n        uint256 quantity,\\n        uint256 price\\n    ) external whenNotPaused nonReentrant {\\n        require(quantity > 0, \\\"Quantity must be greater than 0\\\");\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\n\\n        // Verify that the user has the item in their inventory\\n        bool hasItem = _verifyGameItemOwnership(msg.sender, gameItemId, quantity);\\n        require(hasItem, \\\"You don't own enough of this item\\\");\\n\\n        // Remove the item from the user's inventory\\n        bool removed = _removeItemFromInventory(msg.sender, gameItemId, quantity);\\n        require(removed, \\\"Failed to remove item from inventory\\\");\\n\\n        // Add the item to escrow\\n        _escrowGameItem(msg.sender, gameItemId, quantity);\\n\\n        // Create the listing\\n        _listingIds.increment();\\n        uint256 newListingId = _listingIds.current();\\n\\n        listings[newListingId] = Listing({\\n            listingId: newListingId,\\n            seller: msg.sender,\\n            gameItemId: gameItemId,\\n            quantity: quantity,\\n            price: price,\\n            listedAt: block.timestamp,\\n            active: true\\n        });\\n\\n        // Add to seller's listings\\n        sellerListings[msg.sender].push(newListingId);\\n\\n        // Update market stats\\n        gameItemStats[gameItemId].totalListings++;\\n        gameItemStats[gameItemId].currentListings++;\\n\\n        // Track unique game item if not already tracked\\n        if (!listedGameItems[gameItemId]) {\\n            listedGameItems[gameItemId] = true;\\n            uniqueGameItemIds.push(gameItemId);\\n        }\\n\\n        // Update lowest price listing if applicable\\n        _updateLowestPriceGameItemListing(gameItemId, newListingId, price);\\n\\n        emit ItemListed(newListingId, msg.sender, gameItemId, price, quantity);\\n    }\\n\\n\\n\\n    /**\\n     * @dev Cancel a listing\\n     * @param listingId The ID of the listing to cancel\\n     */\\n    function cancelListing(uint256 listingId) external nonReentrant {\\n        Listing storage listing = listings[listingId];\\n\\n        require(listing.active, \\\"Listing is not active\\\");\\n        require(listing.seller == msg.sender || owner() == msg.sender, \\\"Not authorized\\\");\\n\\n        listing.active = false;\\n\\n        // Update market stats\\n        gameItemStats[listing.gameItemId].currentListings--;\\n\\n        // Check if this was the last listing for this item and remove from unique items if so\\n        if (gameItemStats[listing.gameItemId].currentListings == 0) {\\n            _removeUniqueGameItem(listing.gameItemId);\\n        }\\n\\n        // Update lowest price listing if this was the lowest price\\n        if (lowestPriceListingForGameItem[listing.gameItemId] == listingId) {\\n            _recalculateLowestPriceGameItemListing(listing.gameItemId);\\n        }\\n\\n        // Release item from escrow\\n        bool released = _releaseGameItemFromEscrow(listing.seller, listing.gameItemId, listing.quantity);\\n        require(released, \\\"Failed to release item from escrow\\\");\\n\\n        // Add item back to seller's inventory\\n        _addItemToInventory(listing.seller, listing.gameItemId, listing.quantity);\\n\\n        emit ListingCancelled(listingId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change the price of a listing\\n     * @param listingId The ID of the listing\\n     * @param newPrice The new price\\n     */\\n    function changeListingPrice(uint256 listingId, uint256 newPrice) external nonReentrant {\\n        require(newPrice > 0, \\\"Price must be greater than 0\\\");\\n\\n        Listing storage listing = listings[listingId];\\n\\n        require(listing.active, \\\"Listing is not active\\\");\\n        require(listing.seller == msg.sender, \\\"Not the seller\\\");\\n\\n        uint256 oldPrice = listing.price;\\n        listing.price = newPrice;\\n\\n        // Update lowest price listing if necessary\\n        if (lowestPriceListingForGameItem[listing.gameItemId] == listingId && newPrice > oldPrice) {\\n            _recalculateLowestPriceGameItemListing(listing.gameItemId);\\n        } else if (newPrice < _getLowestPriceForGameItem(listing.gameItemId)) {\\n            _updateLowestPriceGameItemListing(listing.gameItemId, listingId, newPrice);\\n        }\\n\\n        emit PriceChanged(listingId, oldPrice, newPrice);\\n    }\\n\\n    /**\\n     * @dev Buy multiple game items from the marketplace at once\\n     * @param listingIds Array of listing IDs to purchase\\n     * @param quantities Array of quantities to buy for each listing\\n     */\\n    function buyGameItems(uint256[] calldata listingIds, uint256[] calldata quantities) external payable whenNotPaused nonReentrant {\\n        require(listingIds.length > 0, \\\"Must provide at least one listing\\\");\\n        require(listingIds.length == quantities.length, \\\"Arrays length mismatch\\\");\\n        \\n        uint256 totalCost = 0;\\n        \\n        // Calculate total cost first\\n        for (uint256 i = 0; i < listingIds.length; i++) {\\n            Listing storage listing = listings[listingIds[i]];\\n            \\n            require(listing.active, \\\"Listing is not active\\\");\\n            require(quantities[i] > 0 && quantities[i] <= listing.quantity, \\\"Invalid quantity\\\");\\n            require(listing.seller != msg.sender, \\\"Cannot buy your own listing\\\");\\n            \\n            totalCost += listing.price * quantities[i];\\n        }\\n        \\n        // Check if buyer has sent enough MON\\n        require(msg.value >= totalCost, \\\"Insufficient funds sent\\\");\\n        \\n        uint256 remainingValue = msg.value;\\n        \\n        // Process each purchase\\n        for (uint256 i = 0; i < listingIds.length; i++) {\\n            uint256 listingId = listingIds[i];\\n            uint256 quantity = quantities[i];\\n            Listing storage listing = listings[listingId];\\n            \\n            uint256 itemCost = listing.price * quantity;\\n            uint256 fee = (itemCost * marketplaceFeePercentage) / 10000;\\n            uint256 sellerAmount = itemCost - fee;\\n            \\n            // Transfer MON to seller and marketplace\\n            (bool sellerTransferSuccess, ) = payable(listing.seller).call{value: sellerAmount}(\\\"\\\");\\n            require(sellerTransferSuccess, \\\"MON transfer to seller failed\\\");\\n            \\n            (bool feeTransferSuccess, ) = payable(feeCollector).call{value: fee}(\\\"\\\");\\n            require(feeTransferSuccess, \\\"Fee transfer failed\\\");\\n            \\n            remainingValue -= itemCost;\\n            \\n            // Update listing\\n            if (quantity == listing.quantity) {\\n                listing.active = false;\\n                gameItemStats[listing.gameItemId].currentListings--;\\n                \\n                // Check if this was the last listing for this item and remove from unique items if so\\n                if (gameItemStats[listing.gameItemId].currentListings == 0) {\\n                    _removeUniqueGameItem(listing.gameItemId);\\n                }\\n                \\n                // Update lowest price listing if this was the lowest price\\n                if (lowestPriceListingForGameItem[listing.gameItemId] == listingId) {\\n                    _recalculateLowestPriceGameItemListing(listing.gameItemId);\\n                }\\n            } else {\\n                listing.quantity -= quantity;\\n            }\\n            \\n            // Release item from escrow\\n            bool updated = _releaseGameItemFromEscrow(listing.seller, listing.gameItemId, quantity);\\n            require(updated, \\\"Failed to release item from escrow\\\");\\n            \\n            // Add item to buyer's inventory\\n            updated = _addItemToInventory(msg.sender, listing.gameItemId, quantity);\\n            require(updated, \\\"Failed to add item to buyer's inventory\\\");\\n            \\n            // Record sale in history\\n            SaleRecord memory record = SaleRecord({ timestamp: block.timestamp, price: listing.price, quantity: quantity });\\n            gameItemSaleHistory[listing.gameItemId].push(record);\\n            \\n            // Update market stats\\n            MarketStats storage stats = gameItemStats[listing.gameItemId];\\n            stats.totalVolume += itemCost;\\n            stats.numberOfSales++;\\n            stats.lastSoldPrice = listing.price;\\n            \\n            // Update highest/lowest price if applicable\\n            if (listing.price > stats.highestPrice) {\\n                stats.highestPrice = listing.price;\\n            }\\n            if (stats.lowestPrice == 0 || listing.price < stats.lowestPrice) {\\n                stats.lowestPrice = listing.price;\\n            }\\n            \\n            // Update average price (simple rolling average)\\n            stats.avgSoldPrice = (stats.avgSoldPrice * (stats.numberOfSales - 1) + listing.price) / stats.numberOfSales;\\n            \\n            emit ItemSold(listingId, listing.seller, msg.sender, listing.gameItemId, listing.price, quantity);\\n        }\\n        \\n        // Refund excess MON if any\\n        if (remainingValue > 0) {\\n            (bool refundSuccess, ) = payable(msg.sender).call{value: remainingValue}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund of excess MON failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the marketplace fee percentage (in basis points)\\n     * @param newFeePercentage The new fee percentage (100 = 1%, 10000 = 100%)\\n     */\\n    function setMarketplaceFee(uint256 newFeePercentage) external onlyOwner {\\n        require(newFeePercentage <= 3000, \\\"Fee too high\\\"); // Max 30%\\n        marketplaceFeePercentage = newFeePercentage;\\n        emit MarketplaceFeeUpdated(newFeePercentage);\\n    }\\n\\n    /**\\n     * @dev Set the fee collector address\\n     * @param newFeeCollector The new fee collector address\\n     */\\n    function setFeeCollector(address newFeeCollector) external onlyOwner {\\n        require(newFeeCollector != address(0), \\\"Invalid address\\\");\\n        feeCollector = newFeeCollector;\\n        emit FeeCollectorUpdated(newFeeCollector);\\n    }\\n\\n    /**\\n     * @dev Pause the marketplace\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the marketplace\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    // ==================== View Functions ====================\\n\\n    /**\\n     * @dev Get all active listings for a specific game item\\n     * @param gameItemId The game item ID\\n     * @return activeListingIds Array of active listing IDs\\n     */\\n    function getActiveGameItemListings(string memory gameItemId) external view returns (uint256[] memory) {\\n        uint256 count = gameItemStats[gameItemId].currentListings;\\n        if (count == 0) return new uint256[](0);\\n        \\n        uint256[] memory activeListingIds = new uint256[](count);\\n        uint256 currentIndex = 0;\\n        uint256 totalListings = _listingIds.current();\\n\\n        for (uint256 i = 1; i <= totalListings && currentIndex < count; i++) {\\n            Listing storage listing = listings[i];\\n            if (\\n                listing.active &&\\n                keccak256(bytes(listing.gameItemId)) == keccak256(bytes(gameItemId))\\n            ) {\\n                activeListingIds[currentIndex] = i;\\n                currentIndex++;\\n            }\\n        }\\n\\n        return activeListingIds;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Get the price history for a game item\\n     * @param gameItemId The game item ID\\n     * @param limit The maximum number of records to return (0 for all)\\n     * @return records Array of price records\\n     */\\n    function getGameItemPriceHistory(\\n        string memory gameItemId,\\n        uint256 limit\\n    ) external view returns (SaleRecord[] memory) {\\n        SaleRecord[] storage history = gameItemSaleHistory[gameItemId];\\n        uint256 historyLength = history.length;\\n\\n        if (limit == 0 || limit > historyLength) {\\n            limit = historyLength;\\n        }\\n\\n        SaleRecord[] memory records = new SaleRecord[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            // Get the most recent records first\\n            records[i] = history[historyLength - limit + i];\\n        }\\n\\n        return records;\\n    }\\n\\n    /**\\n     * @dev Get the lowest priced listing for a game item\\n     * @param gameItemId The game item ID\\n     * @return listingId The listing ID with the lowest price\\n     * @return price The lowest price\\n     */\\n    function getLowestPriceListingForGameItem(\\n        string memory gameItemId\\n    ) public view returns (uint256 listingId, uint256 price) {\\n        listingId = lowestPriceListingForGameItem[gameItemId];\\n\\n        if (listingId != 0 && listings[listingId].active) {\\n            price = listings[listingId].price;\\n        } else {\\n            price = 0;\\n        }\\n\\n        return (listingId, price);\\n    }\\n\\n    function getTotalQuantity(\\n        string memory gameItemId\\n    ) public view returns (uint256) {\\n        uint256 totalQuantity = 0;\\n        uint256 totalListings = _listingIds.current();\\n\\n        for (uint256 i = 1; i <= totalListings; i++) {\\n            Listing storage listing = listings[i];\\n            if (\\n                listing.active &&\\n                keccak256(bytes(listing.gameItemId)) == keccak256(bytes(gameItemId))\\n            ) {\\n                totalQuantity += listing.quantity;\\n            }\\n        }\\n\\n        return totalQuantity;\\n    }\\n\\n    /**\\n     * @dev Get all unique items with their lowest prices\\n     * @return gameItems Array of game item IDs\\n     * @return gameItemQuantity Array of quantities for each game item\\n     * @return gameItemPrices Array of lowest prices for each game item\\n     */\\n    function getAllUniqueItemsWithPrices()\\n        external\\n        view\\n        returns (\\n            string[] memory gameItems,\\n            uint256[] memory gameItemQuantity,\\n            uint256[] memory gameItemPrices\\n        )\\n    {\\n        // Get all unique game items;\\n        gameItems = uniqueGameItemIds;\\n        gameItemQuantity = new uint256[](gameItems.length);\\n        gameItemPrices = new uint256[](gameItems.length);\\n\\n        // Get lowest price for each game item\\n        for (uint256 i = 0; i < gameItems.length; i++) {\\n            gameItemQuantity[i] = getTotalQuantity(gameItems[i]);\\n            (, uint256 price) = getLowestPriceListingForGameItem(gameItems[i]);\\n            gameItemPrices[i] = price;\\n        }\\n\\n        return (gameItems, gameItemQuantity, gameItemPrices);\\n    }\\n\\n    // ==================== Internal Functions ====================\\n\\n    /**\\n     * @dev Verify if a user owns a game item\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to verify\\n     * @return Whether the user owns the specified quantity of the item\\n     */\\n    function _verifyGameItemOwnership(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal view returns (bool) {\\n        // Get only the inventory data needed for verification\\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\\n        uint256 ownedQuantity = 0;\\n\\n        // Sum up the quantity of matching items\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\\n                ownedQuantity += inventory[i].quantity;\\n            }\\n        }\\n\\n        return ownedQuantity >= quantity;\\n    }\\n\\n    /**\\n     * @dev Helper function to get only the inventory data needed for ownership verification\\n     * @param user The user address\\n     * @return inventory Array of user's inventory items\\n     */\\n    function _getUserInventory(address user) internal view returns (GameSave.InventoryItem[] memory) {\\n        // Check if the user has a save in the GameSave contract\\n        bool hasSave = gameSave.hasSaveData(user);\\n\\n        // If no save exists, return an empty inventory\\n        if (!hasSave) {\\n            return new GameSave.InventoryItem[](0);\\n        }\\n\\n        // Load only the inventory data from the GameSave contract\\n        (\\n            ,\\n            ,\\n            ,\\n            // version (ignored)\\n            // timestamp (ignored)\\n            // player data (ignored)\\n            GameSave.InventoryItem[] memory inventory, // farming data (ignored)\\n            ,\\n\\n        ) = // map changes (ignored)\\n            gameSave.loadGame(user);\\n\\n        return inventory;\\n    }\\n\\n    /**\\n     * @dev Remove a game item from a user's inventory when it's listed on the marketplace\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to remove\\n     * @return Whether the operation was successful\\n     */\\n    function _removeItemFromInventory(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal returns (bool) {\\n        // Get user's current inventory\\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\\n        if (inventory.length == 0) return false;\\n\\n        // Find the item in inventory and create an updated inventory\\n        uint256 slotToUpdate = type(uint256).max;\\n        uint256 newQuantity = 0;\\n\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\\n                if (inventory[i].quantity >= quantity) {\\n                    slotToUpdate = inventory[i].slotIndex;\\n                    newQuantity = inventory[i].quantity - quantity;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (slotToUpdate == type(uint256).max) return false;\\n\\n        // Create updated inventory array with reduced quantity\\n        GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length);\\n        uint updatedItemCount = 0;\\n\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (inventory[i].slotIndex == slotToUpdate) {\\n                if (newQuantity > 0) {\\n                    updatedInventory[updatedItemCount] = GameSave.InventoryItem({\\n                        slotIndex: slotToUpdate,\\n                        itemId: gameItemId,\\n                        quantity: newQuantity\\n                    });\\n                    updatedItemCount++;\\n                }\\n            } else {\\n                updatedInventory[updatedItemCount] = inventory[i];\\n                updatedItemCount++;\\n            }\\n        }\\n\\n        // Create the final array with the correct length\\n        GameSave.InventoryItem[] memory finalInventory = new GameSave.InventoryItem[](updatedItemCount);\\n        for (uint i = 0; i < updatedItemCount; i++) {\\n            finalInventory[i] = updatedInventory[i];\\n        }\\n\\n        // Save the updated inventory back to GameSave\\n        return _updateUserInventory(user, finalInventory);\\n    }\\n\\n    /**\\n     * @dev Add a game item back to a user's inventory when a listing is cancelled or expired\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to add back\\n     * @return Whether the operation was successful\\n     */\\n    function _addItemToInventory(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal returns (bool) {\\n        // Get user's current inventory\\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\\n        \\n        // Try to find if the item already exists to stack it\\n        uint256 slotToUpdate = type(uint256).max;\\n        uint256 newQuantity = 0;\\n\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\\n                slotToUpdate = inventory[i].slotIndex;\\n                newQuantity = inventory[i].quantity + quantity;\\n                break;\\n            }\\n        }\\n\\n        if (slotToUpdate != type(uint256).max) {\\n            // Update existing item\\n            GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length);\\n            \\n            for (uint i = 0; i < inventory.length; i++) {\\n                if (inventory[i].slotIndex == slotToUpdate) {\\n                    updatedInventory[i] = GameSave.InventoryItem({\\n                        slotIndex: slotToUpdate,\\n                        itemId: gameItemId,\\n                        quantity: newQuantity\\n                    });\\n                } else {\\n                    updatedInventory[i] = inventory[i];\\n                }\\n            }\\n            \\n            return _updateUserInventory(user, updatedInventory);\\n        } else {\\n            // Add as new item to the first empty slot or to the end\\n            uint256 newSlot = 0;\\n            bool foundEmptySlot = false;\\n            \\n            // Check for empty slots (assuming slots are sequential)\\n            if (inventory.length > 0) {\\n                // Create a mapping of used slots\\n                bool[] memory usedSlots = new bool[](100); // Assuming max 100 slots\\n                \\n                for (uint i = 0; i < inventory.length; i++) {\\n                    if (inventory[i].slotIndex < 100) {\\n                        usedSlots[inventory[i].slotIndex] = true;\\n                    }\\n                }\\n                \\n                // Find first empty slot\\n                for (uint i = 0; i < 100; i++) {\\n                    if (!usedSlots[i]) {\\n                        newSlot = i;\\n                        foundEmptySlot = true;\\n                        break;\\n                    }\\n                }\\n            }\\n            \\n            if (!foundEmptySlot) {\\n                // If no empty slot found, add to the end\\n                newSlot = inventory.length > 0 ? inventory.length : 0;\\n            }\\n            \\n            // Create updated inventory with new item\\n            GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length + 1);\\n            \\n            for (uint i = 0; i < inventory.length; i++) {\\n                updatedInventory[i] = inventory[i];\\n            }\\n            \\n            updatedInventory[inventory.length] = GameSave.InventoryItem({\\n                slotIndex: newSlot,\\n                itemId: gameItemId,\\n                quantity: quantity\\n            });\\n            \\n            return _updateUserInventory(user, updatedInventory);\\n        }\\n    }\\n\\n    /**\\n     * @dev Update a user's inventory in the GameSave contract\\n     * @param user The user address\\n     * @param inventory The new inventory array\\n     * @return Whether the operation was successful\\n     */\\n    function _updateUserInventory(\\n        address user,\\n        GameSave.InventoryItem[] memory inventory\\n    ) internal returns (bool) {\\n        try gameSave.updateInventory(user, inventory) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a game item to the marketplace's escrow when it's listed\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to add\\n     */\\n    function _escrowGameItem(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal {\\n        userGameItemEscrow[user][gameItemId] += quantity;\\n    }\\n\\n    /**\\n     * @dev Release a game item from escrow back to user when a listing is cancelled\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to release\\n     * @return Whether the operation was successful\\n     */\\n    function _releaseGameItemFromEscrow(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal returns (bool) {\\n        if (userGameItemEscrow[user][gameItemId] < quantity) {\\n            return false;\\n        }\\n        \\n        userGameItemEscrow[user][gameItemId] -= quantity;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Check how many items a user has in escrow\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @return The quantity of the item in escrow\\n     */\\n    function getGameItemEscrowBalance(\\n        address user,\\n        string memory gameItemId\\n    ) external view returns (uint256) {\\n        return userGameItemEscrow[user][gameItemId];\\n    }\\n\\n    /**\\n     * @dev Update the lowest priced listing for a game item\\n     * @param gameItemId The game item ID\\n     * @param listingId The listing ID\\n     * @param price The price\\n     */\\n    function _updateLowestPriceGameItemListing(string memory gameItemId, uint256 listingId, uint256 price) internal {\\n        uint256 currentLowestListingId = lowestPriceListingForGameItem[gameItemId];\\n\\n        if (\\n            currentLowestListingId == 0 ||\\n            !listings[currentLowestListingId].active ||\\n            price < listings[currentLowestListingId].price\\n        ) {\\n            lowestPriceListingForGameItem[gameItemId] = listingId;\\n        }\\n    }\\n\\n\\n\\n    /**\\n     * @dev Recalculate the lowest priced listing for a game item\\n     * @param gameItemId The game item ID\\n     */\\n    function _recalculateLowestPriceGameItemListing(string memory gameItemId) internal {\\n        uint256 totalListings = _listingIds.current();\\n        uint256 lowestPrice = type(uint256).max;\\n        uint256 lowestPriceId = 0;\\n\\n        for (uint256 i = 1; i <= totalListings; i++) {\\n            Listing storage listing = listings[i];\\n            if (\\n                listing.active &&\\n                keccak256(bytes(listing.gameItemId)) == keccak256(bytes(gameItemId)) &&\\n                listing.price < lowestPrice\\n            ) {\\n                lowestPrice = listing.price;\\n                lowestPriceId = i;\\n            }\\n        }\\n\\n        lowestPriceListingForGameItem[gameItemId] = lowestPriceId;\\n    }\\n\\n\\n    /**\\n     * @dev Get the lowest price for a game item\\n     * @param gameItemId The game item ID\\n     * @return The lowest price\\n     */\\n    function _getLowestPriceForGameItem(string memory gameItemId) internal view returns (uint256) {\\n        uint256 listingId = lowestPriceListingForGameItem[gameItemId];\\n        if (listingId != 0 && listings[listingId].active) {\\n            return listings[listingId].price;\\n        }\\n        return type(uint256).max;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Remove a game item from the unique items tracking when it has no active listings\\n     * @param gameItemId The game item ID to remove\\n     */\\n    function _removeUniqueGameItem(string memory gameItemId) internal {\\n        if (listedGameItems[gameItemId]) {\\n            listedGameItems[gameItemId] = false;\\n\\n            // Find and remove the item from the uniqueGameItemIds array\\n            for (uint256 i = 0; i < uniqueGameItemIds.length; i++) {\\n                if (keccak256(bytes(uniqueGameItemIds[i])) == keccak256(bytes(gameItemId))) {\\n                    // Move the last element to the position of the removed element\\n                    if (i < uniqueGameItemIds.length - 1) {\\n                        uniqueGameItemIds[i] = uniqueGameItemIds[uniqueGameItemIds.length - 1];\\n                    }\\n                    // Remove the last element\\n                    uniqueGameItemIds.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xac4e81b8026ad0e51022f2cb29f89953b16420092592014dc0abbe557d45ebe1\",\"license\":\"MIT\"},\"openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260fa6004553480156200001657600080fd5b506040516200442038038062004420833981016040819052620000399162000161565b33806200006157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200006c8162000111565b50600180556002805460ff191690556001600160a01b038116620000d35760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642047616d655361766520616464726573730000000000000000604482015260640162000058565b600280546001600160a01b0390921661010002610100600160a81b0319909216919091179055600580546001600160a01b0319163317905562000193565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200017457600080fd5b81516001600160a01b03811681146200018c57600080fd5b9392505050565b61427d80620001a36000396000f3fe60806040526004361061019c5760003560e01c8063715018a6116100ec578063a0a7870f1161008a578063cc95e29b11610064578063cc95e29b1461056b578063de74e57b146105a6578063ed9b4576146105d9578063f2fde38b146105f957600080fd5b8063a0a7870f146104f0578063a42dce801461052b578063c415b95c1461054b57600080fd5b8063874fae9d116100c6578063874fae9d1461045e5780638da5cb5b1461047e5780639407ea98146104b0578063a0020cec146104d057600080fd5b8063715018a614610407578063741b6f6d1461041c5780638456cb591461044957600080fd5b806331d1f33411610159578063426cc9be11610133578063426cc9be146103605780634adadddf146103955780635c975abb146103ab57806368fe80f4146103cf57600080fd5b806331d1f334146102fe5780633f4ba83a1461031e5780634172b3831461033357600080fd5b8063054564f0146101a157806315ddaa8d146101d4578063189600e8146101f85780631b8bbe111461029c57806328fea9d9146102b1578063305a67a8146102de575b600080fd5b3480156101ad57600080fd5b506101c16101bc36600461338b565b610619565b6040519081526020015b60405180910390f35b3480156101e057600080fd5b506101e961064a565b6040516101cb93929190613440565b34801561020457600080fd5b506102616102133660046135fa565b80516020818301810180516008825292820191909301209152805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016101cb565b6102af6102aa366004613681565b610857565b005b3480156102bd57600080fd5b506102d16102cc3660046136ec565b61130c565b6040516101cb9190613705565b3480156102ea57600080fd5b506102af6102f93660046136ec565b6113b8565b34801561030a57600080fd5b506102af610319366004613718565b6116d7565b34801561032a57600080fd5b506102af611984565b34801561033f57600080fd5b5061035361034e36600461373a565b611996565b6040516101cb919061377e565b34801561036c57600080fd5b5061038061037b3660046135fa565b611ae9565b604080519283526020830191909152016101cb565b3480156103a157600080fd5b506101c160045481565b3480156103b757600080fd5b5060025460ff165b60405190151581526020016101cb565b3480156103db57600080fd5b506101c16103ea3660046135fa565b8051602081830181018051600a8252928201919093012091525481565b34801561041357600080fd5b506102af611b55565b34801561042857600080fd5b5061043c6104373660046135fa565b611b67565b6040516101cb91906137d7565b34801561045557600080fd5b506102af611cac565b34801561046a57600080fd5b506101c16104793660046135fa565b611cbc565b34801561048a57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101cb565b3480156104bc57600080fd5b506102af6104cb3660046136ec565b611d49565b3480156104dc57600080fd5b506102af6104eb3660046137ea565b611dce565b3480156104fc57600080fd5b506103bf61050b3660046135fa565b8051602081830181018051600b8252928201919093012091525460ff1681565b34801561053757600080fd5b506102af610546366004613837565b6121b3565b34801561055757600080fd5b50600554610498906001600160a01b031681565b34801561057757600080fd5b5061058b61058636600461373a565b612251565b604080519384526020840192909252908201526060016101cb565b3480156105b257600080fd5b506105c66105c13660046136ec565b6122a2565b6040516101cb9796959493929190613852565b3480156105e557600080fd5b506101c16105f43660046138a4565b612373565b34801561060557600080fd5b506102af610614366004613837565b6123b0565b6007602052816000526040600020818154811061063557600080fd5b90600052602060002001600091509150505481565b6060806060600c805480602002602001604051908101604052809291908181526020016000905b8282101561071d578382906000526020600020018054610690906138f1565b80601f01602080910402602001604051908101604052809291908181526020018280546106bc906138f1565b80156107095780601f106106de57610100808354040283529160200191610709565b820191906000526020600020905b8154815290600101906020018083116106ec57829003601f168201915b505050505081526020019060010190610671565b50505050925082516001600160401b0381111561073c5761073c6134cb565b604051908082528060200260200182016040528015610765578160200160208202803683370190505b50915082516001600160401b03811115610781576107816134cb565b6040519080825280602002602001820160405280156107aa578160200160208202803683370190505b50905060005b8351811015610851576107db8482815181106107ce576107ce61392b565b6020026020010151611cbc565b8382815181106107ed576107ed61392b565b602002602001018181525050600061081d8583815181106108105761081061392b565b6020026020010151611ae9565b915050808383815181106108335761083361392b565b6020908102919091010152508061084981613957565b9150506107b0565b50909192565b61085f6123eb565b61086761240f565b826108c35760405162461bcd60e51b815260206004820152602160248201527f4d7573742070726f76696465206174206c65617374206f6e65206c697374696e6044820152606760f81b60648201526084015b60405180910390fd5b82811461090b5760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b60448201526064016108ba565b6000805b84811015610a985760006006600088888581811061092f5761092f61392b565b60209081029290920135835250810191909152604001600020600681015490915060ff1661096f5760405162461bcd60e51b81526004016108ba90613970565b60008585848181106109835761098361392b565b905060200201351180156109b3575080600301548585848181106109a9576109a961392b565b9050602002013511155b6109f25760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964207175616e7469747960801b60448201526064016108ba565b6001810154336001600160a01b0390911603610a505760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742062757920796f7572206f776e206c697374696e67000000000060448201526064016108ba565b848483818110610a6257610a6261392b565b905060200201358160040154610a78919061399f565b610a8290846139b6565b9250508080610a9090613957565b91505061090f565b5080341015610ae95760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e7400000000000000000060448201526064016108ba565b3460005b8581101561125a576000878783818110610b0957610b0961392b565b9050602002013590506000868684818110610b2657610b2661392b565b90506020020135905060006006600084815260200190815260200160002090506000828260040154610b58919061399f565b9050600061271060045483610b6d919061399f565b610b7791906139c9565b90506000610b8582846139eb565b60018501546040519192506000916001600160a01b039091169083908381818185875af1925050503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5050905080610c2f5760405162461bcd60e51b815260206004820152601d60248201527f4d4f4e207472616e7366657220746f2073656c6c6572206661696c656400000060448201526064016108ba565b6005546040516000916001600160a01b03169085908381818185875af1925050503d8060008114610c7c576040519150601f19603f3d011682016040523d82523d6000602084013e610c81565b606091505b5050905080610cc85760405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b60448201526064016108ba565b610cd2858b6139eb565b995085600301548703610ea75760068601805460ff19169055604051600890610cff906002890190613a71565b9081526040519081900360200190206006018054906000610d1f83613a7d565b9190505550600886600201604051610d379190613a71565b908152602001604051809103902060060154600003610de557610de5866002018054610d62906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e906138f1565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b5050505050612439565b87600a87600201604051610df99190613a71565b90815260200160405180910390205403610ea257610ea2866002018054610e1f906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4b906138f1565b8015610e985780601f10610e6d57610100808354040283529160200191610e98565b820191906000526020600020905b815481529060010190602001808311610e7b57829003601f168201915b505050505061258f565b610ec1565b86866003016000828254610ebb91906139eb565b90915550505b6001860154600287018054600092610f6c926001600160a01b0390911691610ee8906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f14906138f1565b8015610f615780601f10610f3657610100808354040283529160200191610f61565b820191906000526020600020905b815481529060010190602001808311610f4457829003601f168201915b50505050508a612646565b905080610f8b5760405162461bcd60e51b81526004016108ba90613a94565b61102233886002018054610f9e906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610fca906138f1565b80156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b50505050508a6126e4565b9050806110815760405162461bcd60e51b815260206004820152602760248201527f4661696c656420746f20616464206974656d20746f206275796572277320696e60448201526676656e746f727960c81b60648201526084016108ba565b60408051606081018252428152600489015460208201528082018a905290516009906110b19060028b0190613a71565b9081526040805160209281900383018120805460018082018355600092835285832087516003909302019182559486015194810194909455918401516002938401559091600891611104918c0190613a71565b908152602001604051809103902090508781600001600082825461112891906139b6565b909155505060048101805490600061113f83613957565b90915550506004890154600382018190556001820154101561116657600489015460018201555b6002810154158061117e575080600201548960040154105b1561118e57600489015460028201555b600480820154908a01546111a36001836139eb565b83600701546111b2919061399f565b6111bc91906139b6565b6111c691906139c9565b8160070181905550336001600160a01b03168960010160009054906101000a90046001600160a01b03166001600160a01b03168c7f58259e292896e751851b4d484a388fe984d626c964cb6aa7aee9937d8b2dc0c78c6002018d600401548f60405161123493929190613ad6565b60405180910390a45050505050505050505050808061125290613957565b915050610aed565b5080156112fb57604051600090339083908381818185875af1925050503d80600081146112a3576040519150601f19603f3d011682016040523d82523d6000602084013e6112a8565b606091505b50509050806112f95760405162461bcd60e51b815260206004820152601b60248201527f526566756e64206f6620657863657373204d4f4e206661696c6564000000000060448201526064016108ba565b505b505061130660018055565b50505050565b600c818154811061131c57600080fd5b906000526020600020016000915090508054611337906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611363906138f1565b80156113b05780601f10611385576101008083540402835291602001916113b0565b820191906000526020600020905b81548152906001019060200180831161139357829003601f168201915b505050505081565b6113c061240f565b60008181526006602081905260409091209081015460ff166113f45760405162461bcd60e51b81526004016108ba90613970565b60018101546001600160a01b031633148061142857503361141d6000546001600160a01b031690565b6001600160a01b0316145b6114655760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016108ba565b60068101805460ff19169055604051600890611485906002840190613a71565b90815260405190819003602001902060060180549060006114a583613a7d565b91905055506008816002016040516114bd9190613a71565b9081526020016040518091039020600601546000036114e8576114e8816002018054610d62906138f1565b81600a826002016040516114fc9190613a71565b9081526020016040518091039020540361152257611522816002018054610e1f906138f1565b60018101546002820180546000926115d1926001600160a01b0390911691611549906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611575906138f1565b80156115c25780601f10611597576101008083540402835291602001916115c2565b820191906000526020600020905b8154815290600101906020018083116115a557829003601f168201915b50505050508460030154612646565b9050806115f05760405162461bcd60e51b81526004016108ba90613a94565b600182015460028301805461169b926001600160a01b03169190611613906138f1565b80601f016020809104026020016040519081016040528092919081815260200182805461163f906138f1565b801561168c5780601f106116615761010080835404028352916020019161168c565b820191906000526020600020905b81548152906001019060200180831161166f57829003601f168201915b505050505084600301546126e4565b50604051339084907f8e25282255ab31897df2b0456bb993ac7f84d376861aefd84901d2d63a7428a290600090a350506116d460018055565b50565b6116df61240f565b6000811161172f5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016108ba565b60008281526006602081905260409091209081015460ff166117635760405162461bcd60e51b81526004016108ba90613970565b60018101546001600160a01b031633146117b05760405162461bcd60e51b815260206004820152600e60248201526d2737ba103a34329039b2b63632b960911b60448201526064016108ba565b600481018054908390556040518490600a906117d0906002860190613a71565b9081526020016040518091039020541480156117eb57508083115b1561180757611802826002018054610e1f906138f1565b61193a565b61189c826002018054611819906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611845906138f1565b80156118925780601f1061186757610100808354040283529160200191611892565b820191906000526020600020905b81548152906001019060200180831161187557829003601f168201915b5050505050612b25565b83101561193a5761193a8260020180546118b5906138f1565b80601f01602080910402602001604051908101604052809291908181526020018280546118e1906138f1565b801561192e5780601f106119035761010080835404028352916020019161192e565b820191906000526020600020905b81548152906001019060200180831161191157829003601f168201915b50505050508585612b93565b604080518281526020810185905285917f2bce37c591c5b0d254c3056688b080a088f160fff82b6e79f456c8a20d5570f6910160405180910390a2505061198060018055565b5050565b61198c612c09565b611994612c36565b565b606060006009846040516119aa9190613b6c565b90815260405190819003602001902080549091508315806119ca57508084115b156119d3578093505b6000846001600160401b038111156119ed576119ed6134cb565b604051908082528060200260200182016040528015611a4257816020015b611a2f60405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081611a0b5790505b50905060005b85811015611add578381611a5c88866139eb565b611a6691906139b6565b81548110611a7657611a7661392b565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050828281518110611abf57611abf61392b565b60200260200101819052508080611ad590613957565b915050611a48565b50925050505b92915050565b600080600a83604051611afc9190613b6c565b908152602001604051809103902054915081600014158015611b3057506000828152600660208190526040909120015460ff165b15611b4d5750600081815260066020526040902060040154915091565b506000915091565b611b5d612c09565b6119946000612c88565b60606000600883604051611b7b9190613b6c565b908152602001604051809103902060060154905080600003611bb15760408051600080825260208201909252905b509392505050565b6000816001600160401b03811115611bcb57611bcb6134cb565b604051908082528060200260200182016040528015611bf4578160200160208202803683370190505b509050600080611c0360035490565b905060015b818111158015611c1757508483105b15611ca15760008181526006602081905260409091209081015460ff168015611c5d575087516020890120604051611c53906002840190613a71565b6040518091039020145b15611c8e5781858581518110611c7557611c7561392b565b602090810291909101015283611c8a81613957565b9450505b5080611c9981613957565b915050611c08565b509195945050505050565b611cb4612c09565b611994612cd8565b60008080611cc960035490565b905060015b818111611d405760008181526006602081905260409091209081015460ff168015611d16575085516020870120604051611d0c906002840190613a71565b6040518091039020145b15611d2d576003810154611d2a90856139b6565b93505b5080611d3881613957565b915050611cce565b50909392505050565b611d51612c09565b610bb8811115611d925760405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b60448201526064016108ba565b60048190556040518181527fe18aa129833f655a8166b6185277fee7a53f67e46fd32329bc2fc2ac21274d55906020015b60405180910390a150565b611dd66123eb565b611dde61240f565b60008211611e2e5760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e20300060448201526064016108ba565b60008111611e7e5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016108ba565b6000611e8b338585612d15565b905080611ee45760405162461bcd60e51b815260206004820152602160248201527f596f7520646f6e2774206f776e20656e6f756768206f662074686973206974656044820152606d60f81b60648201526084016108ba565b6000611ef1338686612dad565b905080611f4c5760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f2072656d6f7665206974656d2066726f6d20696e76656e604482015263746f727960e01b60648201526084016108ba565b611f573386866130db565b611f65600380546001019055565b6000611f7060035490565b6040805160e0810182528281523360208083019182528284018b8152606084018b9052608084018a90524260a0850152600160c08501819052600087815260069093529490912083518155915193820180546001600160a01b0319166001600160a01b03909516949094179093559151929350916002820190611ff39082613bd6565b50606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101805460ff19169115159190911790553360009081526007602090815260408083208054600181018255908452919092200182905551600890612060908890613b6c565b908152604051908190036020019020600501805490600061208083613957565b91905055506008866040516120959190613b6c565b90815260405190819003602001902060060180549060006120b583613957565b9190505550600b866040516120ca9190613b6c565b9081526040519081900360200190205460ff16612151576001600b876040516120f39190613b6c565b908152604051908190036020019020805491151560ff19909216919091179055600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70161214f8782613bd6565b505b61215c868286612b93565b336001600160a01b0316817feff9c77bc81011526aa06258443e09f9e394f6f3511c79459acbc785812607ff88878960405161219a93929190613c95565b60405180910390a35050506121ae60018055565b505050565b6121bb612c09565b6001600160a01b0381166122035760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016108ba565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90602001611dc3565b8151602081840181018051600982529282019185019190912091905280548290811061227c57600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b60066020526000908152604090208054600182015460028301805492936001600160a01b03909216926122d4906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054612300906138f1565b801561234d5780601f106123225761010080835404028352916020019161234d565b820191906000526020600020905b81548152906001019060200180831161233057829003601f168201915b505050506003830154600484015460058501546006909501549394919390925060ff1687565b6001600160a01b0382166000908152600d60205260408082209051612399908490613b6c565b908152602001604051809103902054905092915050565b6123b8612c09565b6001600160a01b0381166123e257604051631e4fbdf760e01b8152600060048201526024016108ba565b6116d481612c88565b60025460ff16156119945760405163d93c066560e01b815260040160405180910390fd5b60026001540361243257604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600b816040516124499190613b6c565b9081526040519081900360200190205460ff16156116d4576000600b826040516124739190613b6c565b908152604051908190036020019020805491151560ff1990921691909117905560005b600c54811015611980578180519060200120600c82815481106124bb576124bb61392b565b906000526020600020016040516124d29190613a71565b60405180910390200361257d57600c546124ee906001906139eb565b81101561254a57600c8054612505906001906139eb565b815481106125155761251561392b565b90600052602060002001600c82815481106125325761253261392b565b9060005260206000200190816125489190613cba565b505b600c80548061255b5761255b613d94565b6001900381819060005260206000200160006125779190613321565b90555050565b8061258781613957565b915050612496565b600061259a60035490565b9050600019600060015b83811161261e5760008181526006602081905260409091209081015460ff1680156125ec5750855160208701206040516125e2906002840190613a71565b6040518091039020145b80156125fb5750838160040154105b1561260b57806004015493508192505b508061261681613957565b9150506125a4565b5080600a856040516126309190613b6c565b9081526040519081900360200190205550505050565b6001600160a01b0383166000908152600d6020526040808220905183919061266f908690613b6c565b908152602001604051809103902054101561268c575060006126dd565b6001600160a01b0384166000908152600d60205260409081902090518391906126b6908690613b6c565b908152602001604051809103902060008282546126d391906139eb565b9091555060019150505b9392505050565b6000806126f08561312c565b90506000196000805b835181101561279657868051906020012084828151811061271c5761271c61392b565b6020026020010151602001518051906020012003612784578381815181106127465761274661392b565b6020026020010151600001519250858482815181106127675761276761392b565b60200260200101516040015161277d91906139b6565b9150612796565b8061278e81613957565b9150506126f9565b5060001982146128e057600083516001600160401b038111156127bb576127bb6134cb565b60405190808252806020026020018201604052801561281057816020015b6127fd60405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816127d95790505b50905060005b84518110156128ca57838582815181106128325761283261392b565b60200260200101516000015103612880576040518060600160405280858152602001898152602001848152508282815181106128705761287061392b565b60200260200101819052506128b8565b8481815181106128925761289261392b565b60200260200101518282815181106128ac576128ac61392b565b60200260200101819052505b806128c281613957565b915050612816565b506128d58882613287565b9450505050506126dd565b6000806000855111156129e457604080516064808252610ca0820190925260009160208201610c808036833701905050905060005b86518110156129985760648782815181106129325761293261392b565b6020026020010151600001511015612986576001828883815181106129595761295961392b565b602002602001015160000151815181106129755761297561392b565b911515602092830291909101909101525b8061299081613957565b915050612915565b5060005b60648110156129e1578181815181106129b7576129b761392b565b60200260200101516129cf57809350600192506129e1565b806129d981613957565b91505061299c565b50505b806129ff5760008551116129f95760006129fc565b84515b91505b600085516001612a0f91906139b6565b6001600160401b03811115612a2657612a266134cb565b604051908082528060200260200182016040528015612a7b57816020015b612a6860405180606001604052806000815260200160608152602001600081525090565b815260200190600190039081612a445790505b50905060005b8651811015612ad457868181518110612a9c57612a9c61392b565b6020026020010151828281518110612ab657612ab661392b565b60200260200101819052508080612acc90613957565b915050612a81565b5060405180606001604052808481526020018a81526020018981525081875181518110612b0357612b0361392b565b6020026020010181905250612b188a82613287565b96505050505050506126dd565b600080600a83604051612b389190613b6c565b908152602001604051809103902054905080600014158015612b6c57506000818152600660208190526040909120015460ff165b15612b895760009081526006602052604090206004015492915050565b5060001992915050565b6000600a84604051612ba59190613b6c565b90815260200160405180910390205490508060001480612bd857506000818152600660208190526040909120015460ff16155b80612bf3575060008181526006602052604090206004015482105b156113065782600a856040516126309190613b6c565b6000546001600160a01b031633146119945760405163118cdaa760e01b81523360048201526024016108ba565b612c3e6132fe565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612ce06123eb565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c6b3390565b600080612d218561312c565b90506000805b8251811015612da0578580519060200120838281518110612d4a57612d4a61392b565b6020026020010151602001518051906020012003612d8e57828181518110612d7457612d7461392b565b60200260200101516040015182612d8b91906139b6565b91505b80612d9881613957565b915050612d27565b5090921115949350505050565b600080612db98561312c565b90508051600003612dce5760009150506126dd565b6000196000805b8351811015612e96578680519060200120848281518110612df857612df861392b565b6020026020010151602001518051906020012003612e845785848281518110612e2357612e2361392b565b60200260200101516040015110612e8457838181518110612e4657612e4661392b565b602002602001015160000151925085848281518110612e6757612e6761392b565b602002602001015160400151612e7d91906139eb565b9150612e96565b80612e8e81613957565b915050612dd5565b506000198203612eac57600093505050506126dd565b600083516001600160401b03811115612ec757612ec76134cb565b604051908082528060200260200182016040528015612f1c57816020015b612f0960405180606001604052806000815260200160608152602001600081525090565b815260200190600190039081612ee55790505b5090506000805b8551811015612ffa5784868281518110612f3f57612f3f61392b565b60200260200101516000015103612fa2578315612f9d5760405180606001604052808681526020018a815260200185815250838381518110612f8357612f8361392b565b60200260200101819052508180612f9990613957565b9250505b612fe8565b858181518110612fb457612fb461392b565b6020026020010151838381518110612fce57612fce61392b565b60200260200101819052508180612fe490613957565b9250505b80612ff281613957565b915050612f23565b506000816001600160401b03811115613015576130156134cb565b60405190808252806020026020018201604052801561306a57816020015b61305760405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816130335790505b50905060005b828110156130c25783818151811061308a5761308a61392b565b60200260200101518282815181106130a4576130a461392b565b602002602001018190525080806130ba90613957565b915050613070565b506130cd8a82613287565b9a9950505050505050505050565b6001600160a01b0383166000908152600d6020526040908190209051829190613105908590613b6c565b9081526020016040518091039020600082825461312291906139b6565b9091555050505050565b60025460405163646ee3bf60e11b81526001600160a01b0383811660048301526060926000926101009091049091169063c8ddc77e90602401602060405180830381865afa158015613182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a69190613daa565b905080613201576040805160008082526020820190925290611ba9565b6131e760405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816131c3579050509392505050565b6002546040516360351b1960e01b81526001600160a01b038581166004830152600092610100900416906360351b1990602401600060405180830381865afa158015613251573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261327991908101906140d4565b509098975050505050505050565b600254604051633fc2227d60e01b815260009161010090046001600160a01b031690633fc2227d906132bf90869086906004016141b7565b600060405180830381600087803b1580156132d957600080fd5b505af19250505080156132ea575060015b6132f657506000611ae3565b506001611ae3565b60025460ff1661199457604051638dfc202b60e01b815260040160405180910390fd5b50805461332d906138f1565b6000825580601f1061333d575050565b601f0160209004906000526020600020908101906116d491905b8082111561336b5760008155600101613357565b5090565b80356001600160a01b038116811461338657600080fd5b919050565b6000806040838503121561339e57600080fd5b6133a78361336f565b946020939093013593505050565b60005b838110156133d05781810151838201526020016133b8565b50506000910152565b600081518084526133f18160208601602086016133b5565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101561343557815187529582019590820190600101613419565b509495945050505050565b6000606082016060835280865180835260808501915060808160051b8601019250602080890160005b8381101561349757607f198887030185526134858683516133d9565b95509382019390820190600101613469565b5050858403818701525050506134ad8186613405565b905082810360408401526134c18185613405565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715613503576135036134cb565b60405290565b60405160c081016001600160401b0381118282101715613503576135036134cb565b604051608081016001600160401b0381118282101715613503576135036134cb565b604051601f8201601f191681016001600160401b0381118282101715613575576135756134cb565b604052919050565b60006001600160401b03821115613596576135966134cb565b50601f01601f191660200190565b600082601f8301126135b557600080fd5b81356135c86135c38261357d565b61354d565b8181528460208386010111156135dd57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561360c57600080fd5b81356001600160401b0381111561362257600080fd5b61362e848285016135a4565b949350505050565b60008083601f84011261364857600080fd5b5081356001600160401b0381111561365f57600080fd5b6020830191508360208260051b850101111561367a57600080fd5b9250929050565b6000806000806040858703121561369757600080fd5b84356001600160401b03808211156136ae57600080fd5b6136ba88838901613636565b909650945060208701359150808211156136d357600080fd5b506136e087828801613636565b95989497509550505050565b6000602082840312156136fe57600080fd5b5035919050565b6020815260006126dd60208301846133d9565b6000806040838503121561372b57600080fd5b50508035926020909101359150565b6000806040838503121561374d57600080fd5b82356001600160401b0381111561376357600080fd5b61376f858286016135a4565b95602094909401359450505050565b602080825282518282018190526000919060409081850190868401855b828110156137ca578151805185528681015187860152850151858501526060909301929085019060010161379b565b5091979650505050505050565b6020815260006126dd6020830184613405565b6000806000606084860312156137ff57600080fd5b83356001600160401b0381111561381557600080fd5b613821868287016135a4565b9660208601359650604090950135949350505050565b60006020828403121561384957600080fd5b6126dd8261336f565b8781526001600160a01b038716602082015260e06040820181905260009061387c908301886133d9565b90508560608301528460808301528360a083015282151560c083015298975050505050505050565b600080604083850312156138b757600080fd5b6138c08361336f565b915060208301356001600160401b038111156138db57600080fd5b6138e7858286016135a4565b9150509250929050565b600181811c9082168061390557607f821691505b60208210810361392557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161396957613969613941565b5060010190565b6020808252601590820152744c697374696e67206973206e6f742061637469766560581b604082015260600190565b8082028115828204841417611ae357611ae3613941565b80820180821115611ae357611ae3613941565b6000826139e657634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611ae357611ae3613941565b60008154613a0b816138f1565b60018281168015613a235760018114613a3857613a67565b60ff1984168752821515830287019450613a67565b8560005260208060002060005b85811015613a5e5781548a820152908401908201613a45565b50505082870194505b5050505092915050565b60006126dd82846139fe565b600081613a8c57613a8c613941565b506000190190565b60208082526022908201527f4661696c656420746f2072656c65617365206974656d2066726f6d20657363726040820152616f7760f01b606082015260800190565b606081526000808554613ae8816138f1565b8060608601526080600180841660008114613b0a5760018114613b2457613b55565b60ff1985168884015283151560051b880183019550613b55565b8a60005260208060002060005b86811015613b4c5781548b8201870152908401908201613b31565b8a018501975050505b505050505060208301949094525060400152919050565b60008251613b7e8184602087016133b5565b9190910192915050565b601f8211156121ae57600081815260208120601f850160051c81016020861015613baf5750805b601f850160051c820191505b81811015613bce57828155600101613bbb565b505050505050565b81516001600160401b03811115613bef57613bef6134cb565b613c0381613bfd84546138f1565b84613b88565b602080601f831160018114613c385760008415613c205750858301515b600019600386901b1c1916600185901b178555613bce565b600085815260208120601f198616915b82811015613c6757888601518255948401946001909101908401613c48565b5085821015613c855787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000613ca860608301866133d9565b60208301949094525060400152919050565b818103613cc5575050565b613ccf82546138f1565b6001600160401b03811115613ce657613ce66134cb565b613cf481613bfd84546138f1565b6000601f821160018114613d285760008315613d105750848201545b600019600385901b1c1916600184901b178455613d8d565b600085815260209020601f19841690600086815260209020845b83811015613d625782860154825560019586019590910190602001613d42565b5085831015613d805781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613dbc57600080fd5b815180151581146126dd57600080fd5b60006001600160401b03821115613de557613de56134cb565b5060051b60200190565b600082601f830112613e0057600080fd5b8151613e0e6135c38261357d565b818152846020838601011115613e2357600080fd5b61362e8260208301602087016133b5565b600082601f830112613e4557600080fd5b81516020613e556135c383613dcc565b82815260059290921b84018101918181019086841115613e7457600080fd5b8286015b84811015613efe5780516001600160401b0380821115613e985760008081fd5b908801906060828b03601f1901811315613eb25760008081fd5b613eba6134e1565b87840151815260408085015184811115613ed45760008081fd5b613ee28e8b83890101613def565b8a84015250919093015190830152508352918301918301613e78565b509695505050505050565b600082601f830112613f1a57600080fd5b81516020613f2a6135c383613dcc565b82815260059290921b84018101918181019086841115613f4957600080fd5b8286015b84811015613efe5780516001600160401b0380821115613f6d5760008081fd5b9088019060c0828b03601f1901811315613f875760008081fd5b613f8f613509565b8784015181526040808501518983015260608086015185811115613fb35760008081fd5b613fc18f8c838a0101613def565b8385015250608094508486015181840152505060a080850151848301528285015181830152508087525050505083830192508381019050613f4d565b600082601f83011261400e57600080fd5b8151602061401e6135c383613dcc565b82815260059290921b8401810191818101908684111561403d57600080fd5b8286015b84811015613efe5780516001600160401b03808211156140615760008081fd5b908801906080828b03601f190181131561407b5760008081fd5b61408361352b565b87840151838111156140955760008081fd5b6140a38d8a83880101613def565b8252506040848101518983015260608086015191830191909152919093015190830152508352918301918301614041565b6000806000806000808688036101208112156140ef57600080fd5b87519650602088015195506080603f198201121561410c57600080fd5b5061411561352b565b60408801518152606088015160208201526080880151604082015260a088015160608201528094505060c08701516001600160401b038082111561415857600080fd5b6141648a838b01613e34565b945060e089015191508082111561417a57600080fd5b6141868a838b01613f09565b935061010089015191508082111561419d57600080fd5b506141aa89828a01613ffd565b9150509295509295509295565b6001600160a01b03831681526040602080830182905283518383018190526000929160609182860190600581901b87018401888401875b8381101561423757605f198a840301855281518051845286810151888886015261421a898601826133d9565b918a0151948a0194909452948601949250908501906001016141ee565b50909a995050505050505050505056fea2646970667358221220f68fb7743bfac9e1e53e2226a856fa87028aad14b2107dc3477c74775d02977c64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c8063715018a6116100ec578063a0a7870f1161008a578063cc95e29b11610064578063cc95e29b1461056b578063de74e57b146105a6578063ed9b4576146105d9578063f2fde38b146105f957600080fd5b8063a0a7870f146104f0578063a42dce801461052b578063c415b95c1461054b57600080fd5b8063874fae9d116100c6578063874fae9d1461045e5780638da5cb5b1461047e5780639407ea98146104b0578063a0020cec146104d057600080fd5b8063715018a614610407578063741b6f6d1461041c5780638456cb591461044957600080fd5b806331d1f33411610159578063426cc9be11610133578063426cc9be146103605780634adadddf146103955780635c975abb146103ab57806368fe80f4146103cf57600080fd5b806331d1f334146102fe5780633f4ba83a1461031e5780634172b3831461033357600080fd5b8063054564f0146101a157806315ddaa8d146101d4578063189600e8146101f85780631b8bbe111461029c57806328fea9d9146102b1578063305a67a8146102de575b600080fd5b3480156101ad57600080fd5b506101c16101bc36600461338b565b610619565b6040519081526020015b60405180910390f35b3480156101e057600080fd5b506101e961064a565b6040516101cb93929190613440565b34801561020457600080fd5b506102616102133660046135fa565b80516020818301810180516008825292820191909301209152805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016101cb565b6102af6102aa366004613681565b610857565b005b3480156102bd57600080fd5b506102d16102cc3660046136ec565b61130c565b6040516101cb9190613705565b3480156102ea57600080fd5b506102af6102f93660046136ec565b6113b8565b34801561030a57600080fd5b506102af610319366004613718565b6116d7565b34801561032a57600080fd5b506102af611984565b34801561033f57600080fd5b5061035361034e36600461373a565b611996565b6040516101cb919061377e565b34801561036c57600080fd5b5061038061037b3660046135fa565b611ae9565b604080519283526020830191909152016101cb565b3480156103a157600080fd5b506101c160045481565b3480156103b757600080fd5b5060025460ff165b60405190151581526020016101cb565b3480156103db57600080fd5b506101c16103ea3660046135fa565b8051602081830181018051600a8252928201919093012091525481565b34801561041357600080fd5b506102af611b55565b34801561042857600080fd5b5061043c6104373660046135fa565b611b67565b6040516101cb91906137d7565b34801561045557600080fd5b506102af611cac565b34801561046a57600080fd5b506101c16104793660046135fa565b611cbc565b34801561048a57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101cb565b3480156104bc57600080fd5b506102af6104cb3660046136ec565b611d49565b3480156104dc57600080fd5b506102af6104eb3660046137ea565b611dce565b3480156104fc57600080fd5b506103bf61050b3660046135fa565b8051602081830181018051600b8252928201919093012091525460ff1681565b34801561053757600080fd5b506102af610546366004613837565b6121b3565b34801561055757600080fd5b50600554610498906001600160a01b031681565b34801561057757600080fd5b5061058b61058636600461373a565b612251565b604080519384526020840192909252908201526060016101cb565b3480156105b257600080fd5b506105c66105c13660046136ec565b6122a2565b6040516101cb9796959493929190613852565b3480156105e557600080fd5b506101c16105f43660046138a4565b612373565b34801561060557600080fd5b506102af610614366004613837565b6123b0565b6007602052816000526040600020818154811061063557600080fd5b90600052602060002001600091509150505481565b6060806060600c805480602002602001604051908101604052809291908181526020016000905b8282101561071d578382906000526020600020018054610690906138f1565b80601f01602080910402602001604051908101604052809291908181526020018280546106bc906138f1565b80156107095780601f106106de57610100808354040283529160200191610709565b820191906000526020600020905b8154815290600101906020018083116106ec57829003601f168201915b505050505081526020019060010190610671565b50505050925082516001600160401b0381111561073c5761073c6134cb565b604051908082528060200260200182016040528015610765578160200160208202803683370190505b50915082516001600160401b03811115610781576107816134cb565b6040519080825280602002602001820160405280156107aa578160200160208202803683370190505b50905060005b8351811015610851576107db8482815181106107ce576107ce61392b565b6020026020010151611cbc565b8382815181106107ed576107ed61392b565b602002602001018181525050600061081d8583815181106108105761081061392b565b6020026020010151611ae9565b915050808383815181106108335761083361392b565b6020908102919091010152508061084981613957565b9150506107b0565b50909192565b61085f6123eb565b61086761240f565b826108c35760405162461bcd60e51b815260206004820152602160248201527f4d7573742070726f76696465206174206c65617374206f6e65206c697374696e6044820152606760f81b60648201526084015b60405180910390fd5b82811461090b5760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b60448201526064016108ba565b6000805b84811015610a985760006006600088888581811061092f5761092f61392b565b60209081029290920135835250810191909152604001600020600681015490915060ff1661096f5760405162461bcd60e51b81526004016108ba90613970565b60008585848181106109835761098361392b565b905060200201351180156109b3575080600301548585848181106109a9576109a961392b565b9050602002013511155b6109f25760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964207175616e7469747960801b60448201526064016108ba565b6001810154336001600160a01b0390911603610a505760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742062757920796f7572206f776e206c697374696e67000000000060448201526064016108ba565b848483818110610a6257610a6261392b565b905060200201358160040154610a78919061399f565b610a8290846139b6565b9250508080610a9090613957565b91505061090f565b5080341015610ae95760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e7400000000000000000060448201526064016108ba565b3460005b8581101561125a576000878783818110610b0957610b0961392b565b9050602002013590506000868684818110610b2657610b2661392b565b90506020020135905060006006600084815260200190815260200160002090506000828260040154610b58919061399f565b9050600061271060045483610b6d919061399f565b610b7791906139c9565b90506000610b8582846139eb565b60018501546040519192506000916001600160a01b039091169083908381818185875af1925050503d8060008114610bd9576040519150601f19603f3d011682016040523d82523d6000602084013e610bde565b606091505b5050905080610c2f5760405162461bcd60e51b815260206004820152601d60248201527f4d4f4e207472616e7366657220746f2073656c6c6572206661696c656400000060448201526064016108ba565b6005546040516000916001600160a01b03169085908381818185875af1925050503d8060008114610c7c576040519150601f19603f3d011682016040523d82523d6000602084013e610c81565b606091505b5050905080610cc85760405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b60448201526064016108ba565b610cd2858b6139eb565b995085600301548703610ea75760068601805460ff19169055604051600890610cff906002890190613a71565b9081526040519081900360200190206006018054906000610d1f83613a7d565b9190505550600886600201604051610d379190613a71565b908152602001604051809103902060060154600003610de557610de5866002018054610d62906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e906138f1565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b5050505050612439565b87600a87600201604051610df99190613a71565b90815260200160405180910390205403610ea257610ea2866002018054610e1f906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4b906138f1565b8015610e985780601f10610e6d57610100808354040283529160200191610e98565b820191906000526020600020905b815481529060010190602001808311610e7b57829003601f168201915b505050505061258f565b610ec1565b86866003016000828254610ebb91906139eb565b90915550505b6001860154600287018054600092610f6c926001600160a01b0390911691610ee8906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f14906138f1565b8015610f615780601f10610f3657610100808354040283529160200191610f61565b820191906000526020600020905b815481529060010190602001808311610f4457829003601f168201915b50505050508a612646565b905080610f8b5760405162461bcd60e51b81526004016108ba90613a94565b61102233886002018054610f9e906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610fca906138f1565b80156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b50505050508a6126e4565b9050806110815760405162461bcd60e51b815260206004820152602760248201527f4661696c656420746f20616464206974656d20746f206275796572277320696e60448201526676656e746f727960c81b60648201526084016108ba565b60408051606081018252428152600489015460208201528082018a905290516009906110b19060028b0190613a71565b9081526040805160209281900383018120805460018082018355600092835285832087516003909302019182559486015194810194909455918401516002938401559091600891611104918c0190613a71565b908152602001604051809103902090508781600001600082825461112891906139b6565b909155505060048101805490600061113f83613957565b90915550506004890154600382018190556001820154101561116657600489015460018201555b6002810154158061117e575080600201548960040154105b1561118e57600489015460028201555b600480820154908a01546111a36001836139eb565b83600701546111b2919061399f565b6111bc91906139b6565b6111c691906139c9565b8160070181905550336001600160a01b03168960010160009054906101000a90046001600160a01b03166001600160a01b03168c7f58259e292896e751851b4d484a388fe984d626c964cb6aa7aee9937d8b2dc0c78c6002018d600401548f60405161123493929190613ad6565b60405180910390a45050505050505050505050808061125290613957565b915050610aed565b5080156112fb57604051600090339083908381818185875af1925050503d80600081146112a3576040519150601f19603f3d011682016040523d82523d6000602084013e6112a8565b606091505b50509050806112f95760405162461bcd60e51b815260206004820152601b60248201527f526566756e64206f6620657863657373204d4f4e206661696c6564000000000060448201526064016108ba565b505b505061130660018055565b50505050565b600c818154811061131c57600080fd5b906000526020600020016000915090508054611337906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611363906138f1565b80156113b05780601f10611385576101008083540402835291602001916113b0565b820191906000526020600020905b81548152906001019060200180831161139357829003601f168201915b505050505081565b6113c061240f565b60008181526006602081905260409091209081015460ff166113f45760405162461bcd60e51b81526004016108ba90613970565b60018101546001600160a01b031633148061142857503361141d6000546001600160a01b031690565b6001600160a01b0316145b6114655760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016108ba565b60068101805460ff19169055604051600890611485906002840190613a71565b90815260405190819003602001902060060180549060006114a583613a7d565b91905055506008816002016040516114bd9190613a71565b9081526020016040518091039020600601546000036114e8576114e8816002018054610d62906138f1565b81600a826002016040516114fc9190613a71565b9081526020016040518091039020540361152257611522816002018054610e1f906138f1565b60018101546002820180546000926115d1926001600160a01b0390911691611549906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611575906138f1565b80156115c25780601f10611597576101008083540402835291602001916115c2565b820191906000526020600020905b8154815290600101906020018083116115a557829003601f168201915b50505050508460030154612646565b9050806115f05760405162461bcd60e51b81526004016108ba90613a94565b600182015460028301805461169b926001600160a01b03169190611613906138f1565b80601f016020809104026020016040519081016040528092919081815260200182805461163f906138f1565b801561168c5780601f106116615761010080835404028352916020019161168c565b820191906000526020600020905b81548152906001019060200180831161166f57829003601f168201915b505050505084600301546126e4565b50604051339084907f8e25282255ab31897df2b0456bb993ac7f84d376861aefd84901d2d63a7428a290600090a350506116d460018055565b50565b6116df61240f565b6000811161172f5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016108ba565b60008281526006602081905260409091209081015460ff166117635760405162461bcd60e51b81526004016108ba90613970565b60018101546001600160a01b031633146117b05760405162461bcd60e51b815260206004820152600e60248201526d2737ba103a34329039b2b63632b960911b60448201526064016108ba565b600481018054908390556040518490600a906117d0906002860190613a71565b9081526020016040518091039020541480156117eb57508083115b1561180757611802826002018054610e1f906138f1565b61193a565b61189c826002018054611819906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611845906138f1565b80156118925780601f1061186757610100808354040283529160200191611892565b820191906000526020600020905b81548152906001019060200180831161187557829003601f168201915b5050505050612b25565b83101561193a5761193a8260020180546118b5906138f1565b80601f01602080910402602001604051908101604052809291908181526020018280546118e1906138f1565b801561192e5780601f106119035761010080835404028352916020019161192e565b820191906000526020600020905b81548152906001019060200180831161191157829003601f168201915b50505050508585612b93565b604080518281526020810185905285917f2bce37c591c5b0d254c3056688b080a088f160fff82b6e79f456c8a20d5570f6910160405180910390a2505061198060018055565b5050565b61198c612c09565b611994612c36565b565b606060006009846040516119aa9190613b6c565b90815260405190819003602001902080549091508315806119ca57508084115b156119d3578093505b6000846001600160401b038111156119ed576119ed6134cb565b604051908082528060200260200182016040528015611a4257816020015b611a2f60405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081611a0b5790505b50905060005b85811015611add578381611a5c88866139eb565b611a6691906139b6565b81548110611a7657611a7661392b565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050828281518110611abf57611abf61392b565b60200260200101819052508080611ad590613957565b915050611a48565b50925050505b92915050565b600080600a83604051611afc9190613b6c565b908152602001604051809103902054915081600014158015611b3057506000828152600660208190526040909120015460ff165b15611b4d5750600081815260066020526040902060040154915091565b506000915091565b611b5d612c09565b6119946000612c88565b60606000600883604051611b7b9190613b6c565b908152602001604051809103902060060154905080600003611bb15760408051600080825260208201909252905b509392505050565b6000816001600160401b03811115611bcb57611bcb6134cb565b604051908082528060200260200182016040528015611bf4578160200160208202803683370190505b509050600080611c0360035490565b905060015b818111158015611c1757508483105b15611ca15760008181526006602081905260409091209081015460ff168015611c5d575087516020890120604051611c53906002840190613a71565b6040518091039020145b15611c8e5781858581518110611c7557611c7561392b565b602090810291909101015283611c8a81613957565b9450505b5080611c9981613957565b915050611c08565b509195945050505050565b611cb4612c09565b611994612cd8565b60008080611cc960035490565b905060015b818111611d405760008181526006602081905260409091209081015460ff168015611d16575085516020870120604051611d0c906002840190613a71565b6040518091039020145b15611d2d576003810154611d2a90856139b6565b93505b5080611d3881613957565b915050611cce565b50909392505050565b611d51612c09565b610bb8811115611d925760405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b60448201526064016108ba565b60048190556040518181527fe18aa129833f655a8166b6185277fee7a53f67e46fd32329bc2fc2ac21274d55906020015b60405180910390a150565b611dd66123eb565b611dde61240f565b60008211611e2e5760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e20300060448201526064016108ba565b60008111611e7e5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016108ba565b6000611e8b338585612d15565b905080611ee45760405162461bcd60e51b815260206004820152602160248201527f596f7520646f6e2774206f776e20656e6f756768206f662074686973206974656044820152606d60f81b60648201526084016108ba565b6000611ef1338686612dad565b905080611f4c5760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f2072656d6f7665206974656d2066726f6d20696e76656e604482015263746f727960e01b60648201526084016108ba565b611f573386866130db565b611f65600380546001019055565b6000611f7060035490565b6040805160e0810182528281523360208083019182528284018b8152606084018b9052608084018a90524260a0850152600160c08501819052600087815260069093529490912083518155915193820180546001600160a01b0319166001600160a01b03909516949094179093559151929350916002820190611ff39082613bd6565b50606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101805460ff19169115159190911790553360009081526007602090815260408083208054600181018255908452919092200182905551600890612060908890613b6c565b908152604051908190036020019020600501805490600061208083613957565b91905055506008866040516120959190613b6c565b90815260405190819003602001902060060180549060006120b583613957565b9190505550600b866040516120ca9190613b6c565b9081526040519081900360200190205460ff16612151576001600b876040516120f39190613b6c565b908152604051908190036020019020805491151560ff19909216919091179055600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70161214f8782613bd6565b505b61215c868286612b93565b336001600160a01b0316817feff9c77bc81011526aa06258443e09f9e394f6f3511c79459acbc785812607ff88878960405161219a93929190613c95565b60405180910390a35050506121ae60018055565b505050565b6121bb612c09565b6001600160a01b0381166122035760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016108ba565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90602001611dc3565b8151602081840181018051600982529282019185019190912091905280548290811061227c57600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b60066020526000908152604090208054600182015460028301805492936001600160a01b03909216926122d4906138f1565b80601f0160208091040260200160405190810160405280929190818152602001828054612300906138f1565b801561234d5780601f106123225761010080835404028352916020019161234d565b820191906000526020600020905b81548152906001019060200180831161233057829003601f168201915b505050506003830154600484015460058501546006909501549394919390925060ff1687565b6001600160a01b0382166000908152600d60205260408082209051612399908490613b6c565b908152602001604051809103902054905092915050565b6123b8612c09565b6001600160a01b0381166123e257604051631e4fbdf760e01b8152600060048201526024016108ba565b6116d481612c88565b60025460ff16156119945760405163d93c066560e01b815260040160405180910390fd5b60026001540361243257604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600b816040516124499190613b6c565b9081526040519081900360200190205460ff16156116d4576000600b826040516124739190613b6c565b908152604051908190036020019020805491151560ff1990921691909117905560005b600c54811015611980578180519060200120600c82815481106124bb576124bb61392b565b906000526020600020016040516124d29190613a71565b60405180910390200361257d57600c546124ee906001906139eb565b81101561254a57600c8054612505906001906139eb565b815481106125155761251561392b565b90600052602060002001600c82815481106125325761253261392b565b9060005260206000200190816125489190613cba565b505b600c80548061255b5761255b613d94565b6001900381819060005260206000200160006125779190613321565b90555050565b8061258781613957565b915050612496565b600061259a60035490565b9050600019600060015b83811161261e5760008181526006602081905260409091209081015460ff1680156125ec5750855160208701206040516125e2906002840190613a71565b6040518091039020145b80156125fb5750838160040154105b1561260b57806004015493508192505b508061261681613957565b9150506125a4565b5080600a856040516126309190613b6c565b9081526040519081900360200190205550505050565b6001600160a01b0383166000908152600d6020526040808220905183919061266f908690613b6c565b908152602001604051809103902054101561268c575060006126dd565b6001600160a01b0384166000908152600d60205260409081902090518391906126b6908690613b6c565b908152602001604051809103902060008282546126d391906139eb565b9091555060019150505b9392505050565b6000806126f08561312c565b90506000196000805b835181101561279657868051906020012084828151811061271c5761271c61392b565b6020026020010151602001518051906020012003612784578381815181106127465761274661392b565b6020026020010151600001519250858482815181106127675761276761392b565b60200260200101516040015161277d91906139b6565b9150612796565b8061278e81613957565b9150506126f9565b5060001982146128e057600083516001600160401b038111156127bb576127bb6134cb565b60405190808252806020026020018201604052801561281057816020015b6127fd60405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816127d95790505b50905060005b84518110156128ca57838582815181106128325761283261392b565b60200260200101516000015103612880576040518060600160405280858152602001898152602001848152508282815181106128705761287061392b565b60200260200101819052506128b8565b8481815181106128925761289261392b565b60200260200101518282815181106128ac576128ac61392b565b60200260200101819052505b806128c281613957565b915050612816565b506128d58882613287565b9450505050506126dd565b6000806000855111156129e457604080516064808252610ca0820190925260009160208201610c808036833701905050905060005b86518110156129985760648782815181106129325761293261392b565b6020026020010151600001511015612986576001828883815181106129595761295961392b565b602002602001015160000151815181106129755761297561392b565b911515602092830291909101909101525b8061299081613957565b915050612915565b5060005b60648110156129e1578181815181106129b7576129b761392b565b60200260200101516129cf57809350600192506129e1565b806129d981613957565b91505061299c565b50505b806129ff5760008551116129f95760006129fc565b84515b91505b600085516001612a0f91906139b6565b6001600160401b03811115612a2657612a266134cb565b604051908082528060200260200182016040528015612a7b57816020015b612a6860405180606001604052806000815260200160608152602001600081525090565b815260200190600190039081612a445790505b50905060005b8651811015612ad457868181518110612a9c57612a9c61392b565b6020026020010151828281518110612ab657612ab661392b565b60200260200101819052508080612acc90613957565b915050612a81565b5060405180606001604052808481526020018a81526020018981525081875181518110612b0357612b0361392b565b6020026020010181905250612b188a82613287565b96505050505050506126dd565b600080600a83604051612b389190613b6c565b908152602001604051809103902054905080600014158015612b6c57506000818152600660208190526040909120015460ff165b15612b895760009081526006602052604090206004015492915050565b5060001992915050565b6000600a84604051612ba59190613b6c565b90815260200160405180910390205490508060001480612bd857506000818152600660208190526040909120015460ff16155b80612bf3575060008181526006602052604090206004015482105b156113065782600a856040516126309190613b6c565b6000546001600160a01b031633146119945760405163118cdaa760e01b81523360048201526024016108ba565b612c3e6132fe565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612ce06123eb565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612c6b3390565b600080612d218561312c565b90506000805b8251811015612da0578580519060200120838281518110612d4a57612d4a61392b565b6020026020010151602001518051906020012003612d8e57828181518110612d7457612d7461392b565b60200260200101516040015182612d8b91906139b6565b91505b80612d9881613957565b915050612d27565b5090921115949350505050565b600080612db98561312c565b90508051600003612dce5760009150506126dd565b6000196000805b8351811015612e96578680519060200120848281518110612df857612df861392b565b6020026020010151602001518051906020012003612e845785848281518110612e2357612e2361392b565b60200260200101516040015110612e8457838181518110612e4657612e4661392b565b602002602001015160000151925085848281518110612e6757612e6761392b565b602002602001015160400151612e7d91906139eb565b9150612e96565b80612e8e81613957565b915050612dd5565b506000198203612eac57600093505050506126dd565b600083516001600160401b03811115612ec757612ec76134cb565b604051908082528060200260200182016040528015612f1c57816020015b612f0960405180606001604052806000815260200160608152602001600081525090565b815260200190600190039081612ee55790505b5090506000805b8551811015612ffa5784868281518110612f3f57612f3f61392b565b60200260200101516000015103612fa2578315612f9d5760405180606001604052808681526020018a815260200185815250838381518110612f8357612f8361392b565b60200260200101819052508180612f9990613957565b9250505b612fe8565b858181518110612fb457612fb461392b565b6020026020010151838381518110612fce57612fce61392b565b60200260200101819052508180612fe490613957565b9250505b80612ff281613957565b915050612f23565b506000816001600160401b03811115613015576130156134cb565b60405190808252806020026020018201604052801561306a57816020015b61305760405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816130335790505b50905060005b828110156130c25783818151811061308a5761308a61392b565b60200260200101518282815181106130a4576130a461392b565b602002602001018190525080806130ba90613957565b915050613070565b506130cd8a82613287565b9a9950505050505050505050565b6001600160a01b0383166000908152600d6020526040908190209051829190613105908590613b6c565b9081526020016040518091039020600082825461312291906139b6565b9091555050505050565b60025460405163646ee3bf60e11b81526001600160a01b0383811660048301526060926000926101009091049091169063c8ddc77e90602401602060405180830381865afa158015613182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a69190613daa565b905080613201576040805160008082526020820190925290611ba9565b6131e760405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816131c3579050509392505050565b6002546040516360351b1960e01b81526001600160a01b038581166004830152600092610100900416906360351b1990602401600060405180830381865afa158015613251573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261327991908101906140d4565b509098975050505050505050565b600254604051633fc2227d60e01b815260009161010090046001600160a01b031690633fc2227d906132bf90869086906004016141b7565b600060405180830381600087803b1580156132d957600080fd5b505af19250505080156132ea575060015b6132f657506000611ae3565b506001611ae3565b60025460ff1661199457604051638dfc202b60e01b815260040160405180910390fd5b50805461332d906138f1565b6000825580601f1061333d575050565b601f0160209004906000526020600020908101906116d491905b8082111561336b5760008155600101613357565b5090565b80356001600160a01b038116811461338657600080fd5b919050565b6000806040838503121561339e57600080fd5b6133a78361336f565b946020939093013593505050565b60005b838110156133d05781810151838201526020016133b8565b50506000910152565b600081518084526133f18160208601602086016133b5565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b8381101561343557815187529582019590820190600101613419565b509495945050505050565b6000606082016060835280865180835260808501915060808160051b8601019250602080890160005b8381101561349757607f198887030185526134858683516133d9565b95509382019390820190600101613469565b5050858403818701525050506134ad8186613405565b905082810360408401526134c18185613405565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715613503576135036134cb565b60405290565b60405160c081016001600160401b0381118282101715613503576135036134cb565b604051608081016001600160401b0381118282101715613503576135036134cb565b604051601f8201601f191681016001600160401b0381118282101715613575576135756134cb565b604052919050565b60006001600160401b03821115613596576135966134cb565b50601f01601f191660200190565b600082601f8301126135b557600080fd5b81356135c86135c38261357d565b61354d565b8181528460208386010111156135dd57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561360c57600080fd5b81356001600160401b0381111561362257600080fd5b61362e848285016135a4565b949350505050565b60008083601f84011261364857600080fd5b5081356001600160401b0381111561365f57600080fd5b6020830191508360208260051b850101111561367a57600080fd5b9250929050565b6000806000806040858703121561369757600080fd5b84356001600160401b03808211156136ae57600080fd5b6136ba88838901613636565b909650945060208701359150808211156136d357600080fd5b506136e087828801613636565b95989497509550505050565b6000602082840312156136fe57600080fd5b5035919050565b6020815260006126dd60208301846133d9565b6000806040838503121561372b57600080fd5b50508035926020909101359150565b6000806040838503121561374d57600080fd5b82356001600160401b0381111561376357600080fd5b61376f858286016135a4565b95602094909401359450505050565b602080825282518282018190526000919060409081850190868401855b828110156137ca578151805185528681015187860152850151858501526060909301929085019060010161379b565b5091979650505050505050565b6020815260006126dd6020830184613405565b6000806000606084860312156137ff57600080fd5b83356001600160401b0381111561381557600080fd5b613821868287016135a4565b9660208601359650604090950135949350505050565b60006020828403121561384957600080fd5b6126dd8261336f565b8781526001600160a01b038716602082015260e06040820181905260009061387c908301886133d9565b90508560608301528460808301528360a083015282151560c083015298975050505050505050565b600080604083850312156138b757600080fd5b6138c08361336f565b915060208301356001600160401b038111156138db57600080fd5b6138e7858286016135a4565b9150509250929050565b600181811c9082168061390557607f821691505b60208210810361392557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161396957613969613941565b5060010190565b6020808252601590820152744c697374696e67206973206e6f742061637469766560581b604082015260600190565b8082028115828204841417611ae357611ae3613941565b80820180821115611ae357611ae3613941565b6000826139e657634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611ae357611ae3613941565b60008154613a0b816138f1565b60018281168015613a235760018114613a3857613a67565b60ff1984168752821515830287019450613a67565b8560005260208060002060005b85811015613a5e5781548a820152908401908201613a45565b50505082870194505b5050505092915050565b60006126dd82846139fe565b600081613a8c57613a8c613941565b506000190190565b60208082526022908201527f4661696c656420746f2072656c65617365206974656d2066726f6d20657363726040820152616f7760f01b606082015260800190565b606081526000808554613ae8816138f1565b8060608601526080600180841660008114613b0a5760018114613b2457613b55565b60ff1985168884015283151560051b880183019550613b55565b8a60005260208060002060005b86811015613b4c5781548b8201870152908401908201613b31565b8a018501975050505b505050505060208301949094525060400152919050565b60008251613b7e8184602087016133b5565b9190910192915050565b601f8211156121ae57600081815260208120601f850160051c81016020861015613baf5750805b601f850160051c820191505b81811015613bce57828155600101613bbb565b505050505050565b81516001600160401b03811115613bef57613bef6134cb565b613c0381613bfd84546138f1565b84613b88565b602080601f831160018114613c385760008415613c205750858301515b600019600386901b1c1916600185901b178555613bce565b600085815260208120601f198616915b82811015613c6757888601518255948401946001909101908401613c48565b5085821015613c855787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000613ca860608301866133d9565b60208301949094525060400152919050565b818103613cc5575050565b613ccf82546138f1565b6001600160401b03811115613ce657613ce66134cb565b613cf481613bfd84546138f1565b6000601f821160018114613d285760008315613d105750848201545b600019600385901b1c1916600184901b178455613d8d565b600085815260209020601f19841690600086815260209020845b83811015613d625782860154825560019586019590910190602001613d42565b5085831015613d805781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613dbc57600080fd5b815180151581146126dd57600080fd5b60006001600160401b03821115613de557613de56134cb565b5060051b60200190565b600082601f830112613e0057600080fd5b8151613e0e6135c38261357d565b818152846020838601011115613e2357600080fd5b61362e8260208301602087016133b5565b600082601f830112613e4557600080fd5b81516020613e556135c383613dcc565b82815260059290921b84018101918181019086841115613e7457600080fd5b8286015b84811015613efe5780516001600160401b0380821115613e985760008081fd5b908801906060828b03601f1901811315613eb25760008081fd5b613eba6134e1565b87840151815260408085015184811115613ed45760008081fd5b613ee28e8b83890101613def565b8a84015250919093015190830152508352918301918301613e78565b509695505050505050565b600082601f830112613f1a57600080fd5b81516020613f2a6135c383613dcc565b82815260059290921b84018101918181019086841115613f4957600080fd5b8286015b84811015613efe5780516001600160401b0380821115613f6d5760008081fd5b9088019060c0828b03601f1901811315613f875760008081fd5b613f8f613509565b8784015181526040808501518983015260608086015185811115613fb35760008081fd5b613fc18f8c838a0101613def565b8385015250608094508486015181840152505060a080850151848301528285015181830152508087525050505083830192508381019050613f4d565b600082601f83011261400e57600080fd5b8151602061401e6135c383613dcc565b82815260059290921b8401810191818101908684111561403d57600080fd5b8286015b84811015613efe5780516001600160401b03808211156140615760008081fd5b908801906080828b03601f190181131561407b5760008081fd5b61408361352b565b87840151838111156140955760008081fd5b6140a38d8a83880101613def565b8252506040848101518983015260608086015191830191909152919093015190830152508352918301918301614041565b6000806000806000808688036101208112156140ef57600080fd5b87519650602088015195506080603f198201121561410c57600080fd5b5061411561352b565b60408801518152606088015160208201526080880151604082015260a088015160608201528094505060c08701516001600160401b038082111561415857600080fd5b6141648a838b01613e34565b945060e089015191508082111561417a57600080fd5b6141868a838b01613f09565b935061010089015191508082111561419d57600080fd5b506141aa89828a01613ffd565b9150509295509295509295565b6001600160a01b03831681526040602080830182905283518383018190526000929160609182860190600581901b87018401888401875b8381101561423757605f198a840301855281518051845286810151888886015261421a898601826133d9565b918a0151948a0194909452948601949250908501906001016141ee565b50909a995050505050505050505056fea2646970667358221220f68fb7743bfac9e1e53e2226a856fa87028aad14b2107dc3477c74775d02977c64736f6c63430008140033",
  "devdoc": {
    "details": "A marketplace contract for trading in-game items with supply and demand dynamics similar to the Steam marketplace. All transactions are conducted with native MON.",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "buyGameItems(uint256[],uint256[])": {
        "details": "Buy multiple game items from the marketplace at once",
        "params": {
          "listingIds": "Array of listing IDs to purchase",
          "quantities": "Array of quantities to buy for each listing"
        }
      },
      "cancelListing(uint256)": {
        "details": "Cancel a listing",
        "params": {
          "listingId": "The ID of the listing to cancel"
        }
      },
      "changeListingPrice(uint256,uint256)": {
        "details": "Change the price of a listing",
        "params": {
          "listingId": "The ID of the listing",
          "newPrice": "The new price"
        }
      },
      "constructor": {
        "details": "Constructor to initialize the marketplace with required contract addresses",
        "params": {
          "_gameSave": "Address of the game save contract"
        }
      },
      "getActiveGameItemListings(string)": {
        "details": "Get all active listings for a specific game item",
        "params": {
          "gameItemId": "The game item ID"
        },
        "returns": {
          "_0": "activeListingIds Array of active listing IDs"
        }
      },
      "getAllUniqueItemsWithPrices()": {
        "details": "Get all unique items with their lowest prices",
        "returns": {
          "gameItemPrices": "Array of lowest prices for each game item",
          "gameItemQuantity": "Array of quantities for each game item",
          "gameItems": "Array of game item IDs"
        }
      },
      "getGameItemEscrowBalance(address,string)": {
        "details": "Check how many items a user has in escrow",
        "params": {
          "gameItemId": "The game item ID",
          "user": "The user address"
        },
        "returns": {
          "_0": "The quantity of the item in escrow"
        }
      },
      "getGameItemPriceHistory(string,uint256)": {
        "details": "Get the price history for a game item",
        "params": {
          "gameItemId": "The game item ID",
          "limit": "The maximum number of records to return (0 for all)"
        },
        "returns": {
          "_0": "records Array of price records"
        }
      },
      "getLowestPriceListingForGameItem(string)": {
        "details": "Get the lowest priced listing for a game item",
        "params": {
          "gameItemId": "The game item ID"
        },
        "returns": {
          "listingId": "The listing ID with the lowest price",
          "price": "The lowest price"
        }
      },
      "listGameItem(string,uint256,uint256)": {
        "details": "List a game item on the marketplace",
        "params": {
          "gameItemId": "The ID of the game item as used in the game",
          "price": "The price per unit in MON (wei)",
          "quantity": "The quantity of the item to list"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the marketplace"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeCollector(address)": {
        "details": "Set the fee collector address",
        "params": {
          "newFeeCollector": "The new fee collector address"
        }
      },
      "setMarketplaceFee(uint256)": {
        "details": "Set the marketplace fee percentage (in basis points)",
        "params": {
          "newFeePercentage": "The new fee percentage (100 = 1%, 10000 = 100%)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the marketplace"
      }
    },
    "title": "VolatileMarketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 305,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 186,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 855,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "gameSave",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(GameSave)830"
      },
      {
        "astId": 858,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_listingIds",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)3184_storage"
      },
      {
        "astId": 861,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "marketplaceFeePercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 863,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "feeCollector",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 907,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "listings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Listing)878_storage)"
      },
      {
        "astId": 912,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "sellerListings",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 917,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "gameItemStats",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(MarketStats)902_storage)"
      },
      {
        "astId": 923,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "gameItemSaleHistory",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(SaleRecord)885_storage)dyn_storage)"
      },
      {
        "astId": 927,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "lowestPriceListingForGameItem",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 931,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "listedGameItems",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 934,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "uniqueGameItemIds",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 940,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "userGameItemEscrow",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SaleRecord)885_storage)dyn_storage": {
        "base": "t_struct(SaleRecord)885_storage",
        "encoding": "dynamic_array",
        "label": "struct VolatileMarketplace.SaleRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameSave)830": {
        "encoding": "inplace",
        "label": "contract GameSave",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(SaleRecord)885_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VolatileMarketplace.SaleRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(SaleRecord)885_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MarketStats)902_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VolatileMarketplace.MarketStats)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketStats)902_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)878_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VolatileMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)878_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3184_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3183,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Listing)878_storage": {
        "encoding": "inplace",
        "label": "struct VolatileMarketplace.Listing",
        "members": [
          {
            "astId": 865,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 867,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 869,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "gameItemId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 871,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "quantity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 873,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 875,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "listedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 877,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(MarketStats)902_storage": {
        "encoding": "inplace",
        "label": "struct VolatileMarketplace.MarketStats",
        "members": [
          {
            "astId": 887,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "totalVolume",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 889,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "highestPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 891,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "lowestPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "lastSoldPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 895,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "numberOfSales",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 897,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "totalListings",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 899,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "currentListings",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 901,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "avgSoldPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(SaleRecord)885_storage": {
        "encoding": "inplace",
        "label": "struct VolatileMarketplace.SaleRecord",
        "members": [
          {
            "astId": 880,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 882,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 884,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "quantity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}