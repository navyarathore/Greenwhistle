{
  "address": "0x24519474d5442d7c92f4684950fc13265f836f7a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameSave",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ListingCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "MarketplaceFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "listingIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "name": "buyGameItems",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeListingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameItemSaleHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "gameItemStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVolume",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "highestPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lowestPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastSoldPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfSales",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalListings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentListings",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "avgSoldPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        }
      ],
      "name": "getActiveGameItemListings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUniqueGameItems",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUniqueItemsWithPrices",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "gameItems",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "gameItemPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        }
      ],
      "name": "getGameItemEscrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getGameItemPriceHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            }
          ],
          "internalType": "struct VolatileMarketplace.SaleRecord[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "getListingById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "gameItemId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "listedAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct VolatileMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        }
      ],
      "name": "getLowestPriceListingForGameItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getSellerListings",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listGameItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "listedGameItems",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gameItemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "lowestPriceListingForGameItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplaceFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerListings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "setMarketplaceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniqueGameItemIds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e5cb10b0377438e4edbbae8608fd4803707a793a0352610a17e55c0ee5c7ce7",
  "receipt": {
    "to": null,
    "from": "0x19C19ba61e9BC0568198B6873Bd59181D86d79D4",
    "contractAddress": "0x24519474d5442d7c92f4684950fc13265f836f7a",
    "transactionIndex": 188,
    "gasUsed": "4070512",
    "logsBloom": "0x
    "blockHash": "0x170a5ff9e5db0a8e8284d2a05f7e61e6fdd38206a5a6999184e50ea80999b3f9",
    "transactionHash": "0x8e5cb10b0377438e4edbbae8608fd4803707a793a0352610a17e55c0ee5c7ce7",
    "logs": [
      {
        "transactionIndex": 188,
        "blockNumber": 14780292,
        "transactionHash": "0x8e5cb10b0377438e4edbbae8608fd4803707a793a0352610a17e55c0ee5c7ce7",
        "address": "0x24519474d5442d7c92f4684950fc13265f836f7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000019c19ba61e9bc0568198b6873bd59181d86d79d4"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x170a5ff9e5db0a8e8284d2a05f7e61e6fdd38206a5a6999184e50ea80999b3f9"
      }
    ],
    "blockNumber": 14780292,
    "cumulativeGasUsed": "37758162",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x032b4EcfFB926DF1611224e76812cD870fb8E0Bb"
  ],
  "numDeployments": 1,
  "solcInputHash": "f5d8a63e679e7a58595b4fd300e65fd1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameSave\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"MarketplaceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"listingIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"buyGameItems\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameItemSaleHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gameItemStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowestPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSoldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalListings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentListings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgSoldPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"}],\"name\":\"getActiveGameItemListings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUniqueGameItems\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUniqueItemsWithPrices\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"gameItems\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameItemPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"}],\"name\":\"getGameItemEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getGameItemPriceHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct VolatileMarketplace.SaleRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"getListingById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct VolatileMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"}],\"name\":\"getLowestPriceListingForGameItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerListings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listGameItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"listedGameItems\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gameItemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lowestPriceListingForGameItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setMarketplaceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueGameItemIds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A marketplace contract for trading in-game items with supply and demand dynamics similar to the Steam marketplace. All transactions are conducted with native MON.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"buyGameItems(uint256[],uint256[])\":{\"details\":\"Buy multiple game items from the marketplace at once\",\"params\":{\"listingIds\":\"Array of listing IDs to purchase\",\"quantities\":\"Array of quantities to buy for each listing\"}},\"cancelListing(uint256)\":{\"details\":\"Cancel a listing\",\"params\":{\"listingId\":\"The ID of the listing to cancel\"}},\"changeListingPrice(uint256,uint256)\":{\"details\":\"Change the price of a listing\",\"params\":{\"listingId\":\"The ID of the listing\",\"newPrice\":\"The new price\"}},\"constructor\":{\"details\":\"Constructor to initialize the marketplace with required contract addresses\",\"params\":{\"_gameSave\":\"Address of the game save contract\"}},\"getActiveGameItemListings(string)\":{\"details\":\"Get all active listings for a specific game item\",\"params\":{\"gameItemId\":\"The game item ID\"},\"returns\":{\"_0\":\"activeListingIds Array of active listing IDs\"}},\"getAllUniqueGameItems()\":{\"details\":\"Get all unique game items that are currently listed in the marketplace\",\"returns\":{\"_0\":\"uniqueGameItems Array of unique game item IDs\"}},\"getAllUniqueItemsWithPrices()\":{\"details\":\"Get all unique items with their lowest prices\",\"returns\":{\"gameItemPrices\":\"Array of lowest prices for each game item\",\"gameItems\":\"Array of game item IDs\"}},\"getGameItemEscrowBalance(address,string)\":{\"details\":\"Check how many items a user has in escrow\",\"params\":{\"gameItemId\":\"The game item ID\",\"user\":\"The user address\"},\"returns\":{\"_0\":\"The quantity of the item in escrow\"}},\"getGameItemPriceHistory(string,uint256)\":{\"details\":\"Get the price history for a game item\",\"params\":{\"gameItemId\":\"The game item ID\",\"limit\":\"The maximum number of records to return (0 for all)\"},\"returns\":{\"_0\":\"records Array of price records\"}},\"getListingById(uint256)\":{\"details\":\"Get detailed information about a specific listing\",\"params\":{\"listingId\":\"The ID of the listing to retrieve\"},\"returns\":{\"_0\":\"The complete Listing struct containing all listing details\"}},\"getLowestPriceListingForGameItem(string)\":{\"details\":\"Get the lowest priced listing for a game item\",\"params\":{\"gameItemId\":\"The game item ID\"},\"returns\":{\"listingId\":\"The listing ID with the lowest price\",\"price\":\"The lowest price\"}},\"getSellerListings(address)\":{\"details\":\"Get all listings for a seller\",\"params\":{\"seller\":\"The address of the seller\"},\"returns\":{\"_0\":\"listingIds Array of listing IDs\"}},\"listGameItem(string,uint256,uint256)\":{\"details\":\"List a game item on the marketplace\",\"params\":{\"gameItemId\":\"The ID of the game item as used in the game\",\"price\":\"The price per unit in MON (wei)\",\"quantity\":\"The quantity of the item to list\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the marketplace\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFeeCollector(address)\":{\"details\":\"Set the fee collector address\",\"params\":{\"newFeeCollector\":\"The new fee collector address\"}},\"setMarketplaceFee(uint256)\":{\"details\":\"Set the marketplace fee percentage (in basis points)\",\"params\":{\"newFeePercentage\":\"The new fee percentage (100 = 1%, 10000 = 100%)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the marketplace\"}},\"title\":\"VolatileMarketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VolatileMarketplace.sol\":\"VolatileMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/GameSave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title GameSave\\n * @dev Contract for saving and loading game data to/from the blockchain\\n */\\ncontract GameSave is Ownable, ReentrancyGuard, Pausable {\\n    // Game data structure\\n    struct SaveData {\\n        uint256 version;\\n        uint256 timestamp;\\n        // Player data\\n        PlayerData player;\\n        // Arrays for different game elements\\n        InventoryItem[] inventory;\\n        FarmingData[] farming;\\n        MapChange[] mapChanges;\\n    }\\n\\n    // Player data structure\\n    struct PlayerData {\\n        uint256 positionX;\\n        uint256 positionY;\\n        uint256 health;\\n        uint256 selectedHotbarSlot;\\n    }\\n\\n    // Inventory item structure\\n    struct InventoryItem {\\n        uint256 slotIndex;\\n        string itemId;\\n        uint256 quantity;\\n    }\\n\\n    // Farming data structure\\n    struct FarmingData {\\n        uint256 positionX;\\n        uint256 positionY;\\n        string cropId;\\n        uint256 growthStage;\\n        uint256 plantedTime;\\n        uint256 lastWateredTime;\\n    }\\n\\n    // Map change structure\\n    struct MapChange {\\n        string layer;\\n        uint256 positionX;\\n        uint256 positionY;\\n        int256 tileIndex;\\n    }\\n\\n    // Mapping from address to save data\\n    mapping(address => SaveData) private gameSaves;\\n    mapping(address => bool) private hasSave;\\n\\n    mapping(address => bool) private marketplaceApprovals;\\n\\n    // Events\\n    event GameSaved(address indexed player, uint256 timestamp);\\n    event SaveDeleted(address indexed player);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Save game data to the blockchain\\n     */\\n    function saveGame(\\n        address user,\\n        uint256 _version,\\n        uint256 _timestamp,\\n        PlayerData calldata _player,\\n        InventoryItem[] calldata _inventory,\\n        FarmingData[] calldata _farming,\\n        MapChange[] calldata _mapChanges\\n    ) external whenNotPaused nonReentrant {\\n        SaveData storage saveData = gameSaves[user];\\n\\n        saveData.version = _version;\\n        saveData.timestamp = _timestamp;\\n        saveData.player = _player;\\n\\n        // Clear existing arrays and replace with new data\\n        delete saveData.inventory;\\n        delete saveData.farming;\\n        delete saveData.mapChanges;\\n\\n        // Save inventory items\\n        for (uint i = 0; i < _inventory.length; i++) {\\n            saveData.inventory.push(_inventory[i]);\\n        }\\n\\n        // Save farming data\\n        for (uint i = 0; i < _farming.length; i++) {\\n            saveData.farming.push(_farming[i]);\\n        }\\n\\n        // Save map changes\\n        for (uint i = 0; i < _mapChanges.length; i++) {\\n            saveData.mapChanges.push(_mapChanges[i]);\\n        }\\n\\n        hasSave[user] = true;\\n\\n        emit GameSaved(user, _timestamp);\\n    }\\n\\n    function loadGame(address user)\\n        external\\n        view\\n        whenNotPaused\\n        returns (\\n            uint256 version,\\n            uint256 timestamp,\\n            PlayerData memory player,\\n            InventoryItem[] memory inventory,\\n            FarmingData[] memory farming,\\n            MapChange[] memory mapChanges\\n        )\\n    {\\n        require(hasSave[user], \\\"No save data found for this address\\\");\\n\\n        SaveData storage saveData = gameSaves[user];\\n\\n        return (\\n            saveData.version,\\n            saveData.timestamp,\\n            saveData.player,\\n            saveData.inventory,\\n            saveData.farming,\\n            saveData.mapChanges\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the player's inventory\\n     * @param user The address of the player\\n     * @param _inventory The new inventory items\\n     */\\n    function updateInventory(\\n        address user,\\n        InventoryItem[] calldata _inventory\\n    ) external whenNotPaused nonReentrant {\\n        require(marketplaceApprovals[msg.sender], \\\"Marketplace approval required\\\");\\n        require(hasSave[user], \\\"No save data found for this address\\\");\\n\\n        SaveData storage saveData = gameSaves[user];\\n\\n        // Clear existing inventory and replace with new data\\n        delete saveData.inventory;\\n\\n        // Save inventory items\\n        for (uint i = 0; i < _inventory.length; i++) {\\n            saveData.inventory.push(_inventory[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if the player has a saved game\\n     * @return Whether the player has a saved game\\n     */\\n    function hasSaveData(address user) external view returns (bool) {\\n        return hasSave[user];\\n    }\\n\\n    /**\\n     * @dev Delete the current save\\n     */\\n    function deleteSaveData(address user) external whenNotPaused nonReentrant {\\n        require(hasSave[user], \\\"No save data found for this address\\\");\\n\\n        delete gameSaves[user];\\n        hasSave[user] = false;\\n\\n        emit SaveDeleted(user);\\n    }\\n\\n    /**\\n     * @dev Set marketplace approval for a user\\n     * @param user The address of the user\\n     * @param approved Whether the user is approved for marketplace actions\\n     */\\n    function setMarketplaceApproval(\\n        address user,\\n        bool approved\\n    ) external onlyOwner {\\n        marketplaceApprovals[user] = approved;\\n    }\\n\\n    /**\\n     * @dev Check if a user is approved for marketplace actions\\n     * @param user The address of the user\\n     * @return Whether the user is approved for marketplace actions\\n     */\\n    function isMarketplaceApproved(\\n        address user\\n    ) external view returns (bool) {\\n        return marketplaceApprovals[user];\\n    }\\n\\n    /**\\n     * @dev Pause the contract (only owner)\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract (only owner)\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xb2afd3b29a74ddecf540545f0ae581d226192da6890bd3239a2ac6622955e56d\",\"license\":\"MIT\"},\"contracts/VolatileMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport { Counters } from \\\"openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./GameSave.sol\\\";\\n\\n/**\\n * @title VolatileMarketplace\\n * @dev A marketplace contract for trading in-game items with supply and demand dynamics\\n * similar to the Steam marketplace. All transactions are conducted with native MON.\\n */\\ncontract VolatileMarketplace is Ownable, ReentrancyGuard, Pausable {\\n    using Counters for Counters.Counter;\\n\\n    // Contract dependencies\\n    GameSave private gameSave;\\n\\n    // Listing counter\\n    Counters.Counter private _listingIds;\\n\\n    // Fee structure\\n    uint256 public marketplaceFeePercentage = 250; // 2.5% (using basis points: 10000 = 100%)\\n    address public feeCollector;\\n\\n    // Listing structure\\n    struct Listing {\\n        uint256 listingId;\\n        address seller;\\n        string gameItemId;\\n        uint256 quantity;\\n        uint256 price; // Price per unit in wei\\n        uint256 listedAt;\\n        bool active;\\n    }\\n\\n    // History of sold items for price tracking\\n    struct SaleRecord {\\n        uint256 timestamp;\\n        uint256 price;\\n        uint256 quantity;\\n    }\\n\\n    // Market statistics\\n    struct MarketStats {\\n        uint256 totalVolume; // Total volume traded\\n        uint256 highestPrice; // Highest price ever sold\\n        uint256 lowestPrice; // Lowest price ever sold (if not 0)\\n        uint256 lastSoldPrice; // Last sold price\\n        uint256 numberOfSales; // Number of completed sales\\n        uint256 totalListings; // Total times listed\\n        uint256 currentListings; // Current active listings count\\n        uint256 avgSoldPrice; // Average selling price (rolling)\\n    }\\n\\n    // Mappings\\n    mapping(uint256 => Listing) public listings;\\n    mapping(address => uint256[]) public sellerListings;\\n    mapping(string => MarketStats) public gameItemStats;\\n    mapping(string => SaleRecord[]) public gameItemSaleHistory;\\n\\n    mapping(string => uint256) public lowestPriceListingForGameItem;\\n\\n    // Track unique game items that are listed\\n    mapping(string => bool) public listedGameItems;\\n    string[] public uniqueGameItemIds;\\n    \\n    mapping(address => mapping(string => uint256)) private userGameItemEscrow;\\n\\n    // Events\\n    event ItemListed(\\n        uint256 indexed listingId,\\n        address indexed seller,\\n        string gameItemId,\\n        uint256 price,\\n        uint256 quantity\\n    );\\n    event ListingCancelled(uint256 indexed listingId, address indexed seller);\\n    event ItemSold(\\n        uint256 indexed listingId,\\n        address indexed seller,\\n        address indexed buyer,\\n        string gameItemId,\\n        uint256 price,\\n        uint256 quantity\\n    );\\n    event MarketplaceFeeUpdated(uint256 newFeePercentage);\\n    event FeeCollectorUpdated(address newFeeCollector);\\n    event PriceChanged(uint256 indexed listingId, uint256 oldPrice, uint256 newPrice);\\n\\n    /**\\n     * @dev Constructor to initialize the marketplace with required contract addresses\\n     * @param _gameSave Address of the game save contract\\n     */\\n    constructor(address _gameSave) Ownable(msg.sender) {\\n        require(_gameSave != address(0), \\\"Invalid GameSave address\\\");\\n\\n        gameSave = GameSave(_gameSave);\\n\\n        feeCollector = msg.sender;\\n    }\\n\\n    /**\\n     * @dev List a game item on the marketplace\\n     * @param gameItemId The ID of the game item as used in the game\\n     * @param quantity The quantity of the item to list\\n     * @param price The price per unit in MON (wei)\\n     */\\n    function listGameItem(\\n        string memory gameItemId,\\n        uint256 quantity,\\n        uint256 price\\n    ) external whenNotPaused nonReentrant {\\n        require(quantity > 0, \\\"Quantity must be greater than 0\\\");\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\n\\n        // Verify that the user has the item in their inventory\\n        bool hasItem = _verifyGameItemOwnership(msg.sender, gameItemId, quantity);\\n        require(hasItem, \\\"You don't own enough of this item\\\");\\n\\n        // Remove the item from the user's inventory\\n        bool removed = _removeItemFromInventory(msg.sender, gameItemId, quantity);\\n        require(removed, \\\"Failed to remove item from inventory\\\");\\n\\n        // Add the item to escrow\\n        _escrowGameItem(msg.sender, gameItemId, quantity);\\n\\n        // Create the listing\\n        _listingIds.increment();\\n        uint256 newListingId = _listingIds.current();\\n\\n        listings[newListingId] = Listing({\\n            listingId: newListingId,\\n            seller: msg.sender,\\n            gameItemId: gameItemId,\\n            quantity: quantity,\\n            price: price,\\n            listedAt: block.timestamp,\\n            active: true\\n        });\\n\\n        // Add to seller's listings\\n        sellerListings[msg.sender].push(newListingId);\\n\\n        // Update market stats\\n        gameItemStats[gameItemId].totalListings++;\\n        gameItemStats[gameItemId].currentListings++;\\n\\n        // Track unique game item if not already tracked\\n        if (!listedGameItems[gameItemId]) {\\n            listedGameItems[gameItemId] = true;\\n            uniqueGameItemIds.push(gameItemId);\\n        }\\n\\n        // Update lowest price listing if applicable\\n        _updateLowestPriceGameItemListing(gameItemId, newListingId, price);\\n\\n        emit ItemListed(newListingId, msg.sender, gameItemId, price, quantity);\\n    }\\n\\n\\n\\n    /**\\n     * @dev Cancel a listing\\n     * @param listingId The ID of the listing to cancel\\n     */\\n    function cancelListing(uint256 listingId) external nonReentrant {\\n        Listing storage listing = listings[listingId];\\n\\n        require(listing.active, \\\"Listing is not active\\\");\\n        require(listing.seller == msg.sender || owner() == msg.sender, \\\"Not authorized\\\");\\n\\n        listing.active = false;\\n\\n        // Update market stats\\n        gameItemStats[listing.gameItemId].currentListings--;\\n\\n        // Check if this was the last listing for this item and remove from unique items if so\\n        if (gameItemStats[listing.gameItemId].currentListings == 0) {\\n            _removeUniqueGameItem(listing.gameItemId);\\n        }\\n\\n        // Update lowest price listing if this was the lowest price\\n        if (lowestPriceListingForGameItem[listing.gameItemId] == listingId) {\\n            _recalculateLowestPriceGameItemListing(listing.gameItemId);\\n        }\\n\\n        // Release item from escrow\\n        bool released = _releaseGameItemFromEscrow(listing.seller, listing.gameItemId, listing.quantity);\\n        require(released, \\\"Failed to release item from escrow\\\");\\n\\n        // Add item back to seller's inventory\\n        _addItemToInventory(listing.seller, listing.gameItemId, listing.quantity);\\n\\n        emit ListingCancelled(listingId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change the price of a listing\\n     * @param listingId The ID of the listing\\n     * @param newPrice The new price\\n     */\\n    function changeListingPrice(uint256 listingId, uint256 newPrice) external nonReentrant {\\n        require(newPrice > 0, \\\"Price must be greater than 0\\\");\\n\\n        Listing storage listing = listings[listingId];\\n\\n        require(listing.active, \\\"Listing is not active\\\");\\n        require(listing.seller == msg.sender, \\\"Not the seller\\\");\\n\\n        uint256 oldPrice = listing.price;\\n        listing.price = newPrice;\\n\\n        // Update lowest price listing if necessary\\n        if (lowestPriceListingForGameItem[listing.gameItemId] == listingId && newPrice > oldPrice) {\\n            _recalculateLowestPriceGameItemListing(listing.gameItemId);\\n        } else if (newPrice < _getLowestPriceForGameItem(listing.gameItemId)) {\\n            _updateLowestPriceGameItemListing(listing.gameItemId, listingId, newPrice);\\n        }\\n\\n        emit PriceChanged(listingId, oldPrice, newPrice);\\n    }\\n\\n    /**\\n     * @dev Buy multiple game items from the marketplace at once\\n     * @param listingIds Array of listing IDs to purchase\\n     * @param quantities Array of quantities to buy for each listing\\n     */\\n    function buyGameItems(uint256[] calldata listingIds, uint256[] calldata quantities) external payable whenNotPaused nonReentrant {\\n        require(listingIds.length > 0, \\\"Must provide at least one listing\\\");\\n        require(listingIds.length == quantities.length, \\\"Arrays length mismatch\\\");\\n        \\n        uint256 totalCost = 0;\\n        \\n        // Calculate total cost first\\n        for (uint256 i = 0; i < listingIds.length; i++) {\\n            Listing storage listing = listings[listingIds[i]];\\n            \\n            require(listing.active, \\\"Listing is not active\\\");\\n            require(quantities[i] > 0 && quantities[i] <= listing.quantity, \\\"Invalid quantity\\\");\\n            require(listing.seller != msg.sender, \\\"Cannot buy your own listing\\\");\\n            \\n            totalCost += listing.price * quantities[i];\\n        }\\n        \\n        // Check if buyer has sent enough MON\\n        require(msg.value >= totalCost, \\\"Insufficient funds sent\\\");\\n        \\n        uint256 remainingValue = msg.value;\\n        \\n        // Process each purchase\\n        for (uint256 i = 0; i < listingIds.length; i++) {\\n            uint256 listingId = listingIds[i];\\n            uint256 quantity = quantities[i];\\n            Listing storage listing = listings[listingId];\\n            \\n            uint256 itemCost = listing.price * quantity;\\n            uint256 fee = (itemCost * marketplaceFeePercentage) / 10000;\\n            uint256 sellerAmount = itemCost - fee;\\n            \\n            // Transfer MON to seller and marketplace\\n            (bool sellerTransferSuccess, ) = payable(listing.seller).call{value: sellerAmount}(\\\"\\\");\\n            require(sellerTransferSuccess, \\\"MON transfer to seller failed\\\");\\n            \\n            (bool feeTransferSuccess, ) = payable(feeCollector).call{value: fee}(\\\"\\\");\\n            require(feeTransferSuccess, \\\"Fee transfer failed\\\");\\n            \\n            remainingValue -= itemCost;\\n            \\n            // Update listing\\n            if (quantity == listing.quantity) {\\n                listing.active = false;\\n                gameItemStats[listing.gameItemId].currentListings--;\\n                \\n                // Check if this was the last listing for this item and remove from unique items if so\\n                if (gameItemStats[listing.gameItemId].currentListings == 0) {\\n                    _removeUniqueGameItem(listing.gameItemId);\\n                }\\n                \\n                // Update lowest price listing if this was the lowest price\\n                if (lowestPriceListingForGameItem[listing.gameItemId] == listingId) {\\n                    _recalculateLowestPriceGameItemListing(listing.gameItemId);\\n                }\\n            } else {\\n                listing.quantity -= quantity;\\n            }\\n            \\n            // Release item from escrow\\n            bool updated = _releaseGameItemFromEscrow(listing.seller, listing.gameItemId, quantity);\\n            require(updated, \\\"Failed to release item from escrow\\\");\\n            \\n            // Add item to buyer's inventory\\n            updated = _addItemToInventory(msg.sender, listing.gameItemId, quantity);\\n            require(updated, \\\"Failed to add item to buyer's inventory\\\");\\n            \\n            // Record sale in history\\n            SaleRecord memory record = SaleRecord({ timestamp: block.timestamp, price: listing.price, quantity: quantity });\\n            gameItemSaleHistory[listing.gameItemId].push(record);\\n            \\n            // Update market stats\\n            MarketStats storage stats = gameItemStats[listing.gameItemId];\\n            stats.totalVolume += itemCost;\\n            stats.numberOfSales++;\\n            stats.lastSoldPrice = listing.price;\\n            \\n            // Update highest/lowest price if applicable\\n            if (listing.price > stats.highestPrice) {\\n                stats.highestPrice = listing.price;\\n            }\\n            if (stats.lowestPrice == 0 || listing.price < stats.lowestPrice) {\\n                stats.lowestPrice = listing.price;\\n            }\\n            \\n            // Update average price (simple rolling average)\\n            stats.avgSoldPrice = (stats.avgSoldPrice * (stats.numberOfSales - 1) + listing.price) / stats.numberOfSales;\\n            \\n            emit ItemSold(listingId, listing.seller, msg.sender, listing.gameItemId, listing.price, quantity);\\n        }\\n        \\n        // Refund excess MON if any\\n        if (remainingValue > 0) {\\n            (bool refundSuccess, ) = payable(msg.sender).call{value: remainingValue}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund of excess MON failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the marketplace fee percentage (in basis points)\\n     * @param newFeePercentage The new fee percentage (100 = 1%, 10000 = 100%)\\n     */\\n    function setMarketplaceFee(uint256 newFeePercentage) external onlyOwner {\\n        require(newFeePercentage <= 3000, \\\"Fee too high\\\"); // Max 30%\\n        marketplaceFeePercentage = newFeePercentage;\\n        emit MarketplaceFeeUpdated(newFeePercentage);\\n    }\\n\\n    /**\\n     * @dev Set the fee collector address\\n     * @param newFeeCollector The new fee collector address\\n     */\\n    function setFeeCollector(address newFeeCollector) external onlyOwner {\\n        require(newFeeCollector != address(0), \\\"Invalid address\\\");\\n        feeCollector = newFeeCollector;\\n        emit FeeCollectorUpdated(newFeeCollector);\\n    }\\n\\n    /**\\n     * @dev Pause the marketplace\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the marketplace\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    // ==================== View Functions ====================\\n\\n    /**\\n     * @dev Get all listings for a seller\\n     * @param seller The address of the seller\\n     * @return listingIds Array of listing IDs\\n     */\\n    function getSellerListings(address seller) external view returns (uint256[] memory) {\\n        return sellerListings[seller];\\n    }\\n\\n    /**\\n     * @dev Get all active listings for a specific game item\\n     * @param gameItemId The game item ID\\n     * @return activeListingIds Array of active listing IDs\\n     */\\n    function getActiveGameItemListings(string memory gameItemId) external view returns (uint256[] memory) {\\n        uint256 count = gameItemStats[gameItemId].currentListings;\\n        uint256[] memory activeListingIds = new uint256[](count);\\n\\n        uint256 currentIndex = 0;\\n        uint256 totalListings = _listingIds.current();\\n\\n        for (uint256 i = 1; i <= totalListings && currentIndex < count; i++) {\\n            Listing storage listing = listings[i];\\n            if (\\n                listing.active &&\\n                keccak256(bytes(listing.gameItemId)) == keccak256(bytes(gameItemId))\\n            ) {\\n                activeListingIds[currentIndex] = i;\\n                currentIndex++;\\n            }\\n        }\\n\\n        return activeListingIds;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Get the price history for a game item\\n     * @param gameItemId The game item ID\\n     * @param limit The maximum number of records to return (0 for all)\\n     * @return records Array of price records\\n     */\\n    function getGameItemPriceHistory(\\n        string memory gameItemId,\\n        uint256 limit\\n    ) external view returns (SaleRecord[] memory) {\\n        SaleRecord[] storage history = gameItemSaleHistory[gameItemId];\\n        uint256 historyLength = history.length;\\n\\n        if (limit == 0 || limit > historyLength) {\\n            limit = historyLength;\\n        }\\n\\n        SaleRecord[] memory records = new SaleRecord[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            // Get the most recent records first\\n            records[i] = history[historyLength - limit + i];\\n        }\\n\\n        return records;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Get the lowest priced listing for a game item\\n     * @param gameItemId The game item ID\\n     * @return listingId The listing ID with the lowest price\\n     * @return price The lowest price\\n     */\\n    function getLowestPriceListingForGameItem(\\n        string memory gameItemId\\n    ) external view returns (uint256 listingId, uint256 price) {\\n        listingId = lowestPriceListingForGameItem[gameItemId];\\n\\n        if (listingId != 0 && listings[listingId].active) {\\n            price = listings[listingId].price;\\n        } else {\\n            price = 0;\\n        }\\n\\n        return (listingId, price);\\n    }\\n\\n\\n\\n    /**\\n     * @dev Get all unique game items that are currently listed in the marketplace\\n     * @return uniqueGameItems Array of unique game item IDs\\n     */\\n    function getAllUniqueGameItems() external view returns (string[] memory) {\\n        // Simply return the tracked unique game items\\n        return uniqueGameItemIds;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Get detailed information about a specific listing\\n     * @param listingId The ID of the listing to retrieve\\n     * @return The complete Listing struct containing all listing details\\n     */\\n    function getListingById(uint256 listingId) external view returns (Listing memory) {\\n        require(listingId > 0 && listingId <= _listingIds.current(), \\\"Invalid listing ID\\\");\\n        return listings[listingId];\\n    }\\n\\n    /**\\n     * @dev Get all unique items with their lowest prices\\n     * @return gameItems Array of game item IDs\\n     * @return gameItemPrices Array of lowest prices for each game item\\n     */\\n    function getAllUniqueItemsWithPrices()\\n        external\\n        view\\n        returns (\\n            string[] memory gameItems,\\n            uint256[] memory gameItemPrices\\n        )\\n    {\\n        // Get all unique game items\\n        gameItems = this.getAllUniqueGameItems();\\n        gameItemPrices = new uint256[](gameItems.length);\\n\\n        // Get lowest price for each game item\\n        for (uint256 i = 0; i < gameItems.length; i++) {\\n            (, uint256 price) = this.getLowestPriceListingForGameItem(gameItems[i]);\\n            gameItemPrices[i] = price;\\n        }\\n\\n        return (gameItems, gameItemPrices);\\n    }\\n\\n    // ==================== Internal Functions ====================\\n\\n    /**\\n     * @dev Verify if a user owns a game item\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to verify\\n     * @return Whether the user owns the specified quantity of the item\\n     */\\n    function _verifyGameItemOwnership(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal view returns (bool) {\\n        // Get only the inventory data needed for verification\\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\\n        uint256 ownedQuantity = 0;\\n\\n        // Sum up the quantity of matching items\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\\n                ownedQuantity += inventory[i].quantity;\\n            }\\n        }\\n\\n        return ownedQuantity >= quantity;\\n    }\\n\\n    /**\\n     * @dev Helper function to get only the inventory data needed for ownership verification\\n     * @param user The user address\\n     * @return inventory Array of user's inventory items\\n     */\\n    function _getUserInventory(address user) internal view returns (GameSave.InventoryItem[] memory) {\\n        // Check if the user has a save in the GameSave contract\\n        bool hasSave = gameSave.hasSaveData(user);\\n\\n        // If no save exists or the user isn't the caller, return an empty inventory\\n        if (!hasSave || user != msg.sender) {\\n            return new GameSave.InventoryItem[](0);\\n        }\\n\\n        // Load only the inventory data from the GameSave contract\\n        (\\n            ,\\n            ,\\n            ,\\n            // version (ignored)\\n            // timestamp (ignored)\\n            // player data (ignored)\\n            GameSave.InventoryItem[] memory inventory, // farming data (ignored)\\n            ,\\n\\n        ) = // map changes (ignored)\\n            gameSave.loadGame(user);\\n\\n        return inventory;\\n    }\\n\\n    /**\\n     * @dev Remove a game item from a user's inventory when it's listed on the marketplace\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to remove\\n     * @return Whether the operation was successful\\n     */\\n    function _removeItemFromInventory(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal returns (bool) {\\n        // Get user's current inventory\\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\\n        if (inventory.length == 0) return false;\\n\\n        // Find the item in inventory and create an updated inventory\\n        uint256 slotToUpdate = type(uint256).max;\\n        uint256 newQuantity = 0;\\n\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\\n                if (inventory[i].quantity >= quantity) {\\n                    slotToUpdate = inventory[i].slotIndex;\\n                    newQuantity = inventory[i].quantity - quantity;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (slotToUpdate == type(uint256).max) return false;\\n\\n        // Create updated inventory array with reduced quantity\\n        GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length);\\n        uint updatedItemCount = 0;\\n\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (inventory[i].slotIndex == slotToUpdate) {\\n                if (newQuantity > 0) {\\n                    updatedInventory[updatedItemCount] = GameSave.InventoryItem({\\n                        slotIndex: slotToUpdate,\\n                        itemId: gameItemId,\\n                        quantity: newQuantity\\n                    });\\n                    updatedItemCount++;\\n                }\\n            } else {\\n                updatedInventory[updatedItemCount] = inventory[i];\\n                updatedItemCount++;\\n            }\\n        }\\n\\n        // Create the final array with the correct length\\n        GameSave.InventoryItem[] memory finalInventory = new GameSave.InventoryItem[](updatedItemCount);\\n        for (uint i = 0; i < updatedItemCount; i++) {\\n            finalInventory[i] = updatedInventory[i];\\n        }\\n\\n        // Save the updated inventory back to GameSave\\n        return _updateUserInventory(user, finalInventory);\\n    }\\n\\n    /**\\n     * @dev Add a game item back to a user's inventory when a listing is cancelled or expired\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to add back\\n     * @return Whether the operation was successful\\n     */\\n    function _addItemToInventory(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal returns (bool) {\\n        // Get user's current inventory\\n        GameSave.InventoryItem[] memory inventory = _getUserInventory(user);\\n        \\n        // Try to find if the item already exists to stack it\\n        uint256 slotToUpdate = type(uint256).max;\\n        uint256 newQuantity = 0;\\n\\n        for (uint i = 0; i < inventory.length; i++) {\\n            if (keccak256(bytes(inventory[i].itemId)) == keccak256(bytes(gameItemId))) {\\n                slotToUpdate = inventory[i].slotIndex;\\n                newQuantity = inventory[i].quantity + quantity;\\n                break;\\n            }\\n        }\\n\\n        if (slotToUpdate != type(uint256).max) {\\n            // Update existing item\\n            GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length);\\n            \\n            for (uint i = 0; i < inventory.length; i++) {\\n                if (inventory[i].slotIndex == slotToUpdate) {\\n                    updatedInventory[i] = GameSave.InventoryItem({\\n                        slotIndex: slotToUpdate,\\n                        itemId: gameItemId,\\n                        quantity: newQuantity\\n                    });\\n                } else {\\n                    updatedInventory[i] = inventory[i];\\n                }\\n            }\\n            \\n            return _updateUserInventory(user, updatedInventory);\\n        } else {\\n            // Add as new item to the first empty slot or to the end\\n            uint256 newSlot = 0;\\n            bool foundEmptySlot = false;\\n            \\n            // Check for empty slots (assuming slots are sequential)\\n            if (inventory.length > 0) {\\n                // Create a mapping of used slots\\n                bool[] memory usedSlots = new bool[](100); // Assuming max 100 slots\\n                \\n                for (uint i = 0; i < inventory.length; i++) {\\n                    if (inventory[i].slotIndex < 100) {\\n                        usedSlots[inventory[i].slotIndex] = true;\\n                    }\\n                }\\n                \\n                // Find first empty slot\\n                for (uint i = 0; i < 100; i++) {\\n                    if (!usedSlots[i]) {\\n                        newSlot = i;\\n                        foundEmptySlot = true;\\n                        break;\\n                    }\\n                }\\n            }\\n            \\n            if (!foundEmptySlot) {\\n                // If no empty slot found, add to the end\\n                newSlot = inventory.length > 0 ? inventory.length : 0;\\n            }\\n            \\n            // Create updated inventory with new item\\n            GameSave.InventoryItem[] memory updatedInventory = new GameSave.InventoryItem[](inventory.length + 1);\\n            \\n            for (uint i = 0; i < inventory.length; i++) {\\n                updatedInventory[i] = inventory[i];\\n            }\\n            \\n            updatedInventory[inventory.length] = GameSave.InventoryItem({\\n                slotIndex: newSlot,\\n                itemId: gameItemId,\\n                quantity: quantity\\n            });\\n            \\n            return _updateUserInventory(user, updatedInventory);\\n        }\\n    }\\n\\n    /**\\n     * @dev Update a user's inventory in the GameSave contract\\n     * @param user The user address\\n     * @param inventory The new inventory array\\n     * @return Whether the operation was successful\\n     */\\n    function _updateUserInventory(\\n        address user,\\n        GameSave.InventoryItem[] memory inventory\\n    ) internal returns (bool) {\\n        try gameSave.updateInventory(user, inventory) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a game item to the marketplace's escrow when it's listed\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to add\\n     */\\n    function _escrowGameItem(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal {\\n        userGameItemEscrow[user][gameItemId] += quantity;\\n    }\\n\\n    /**\\n     * @dev Release a game item from escrow back to user when a listing is cancelled\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @param quantity The quantity to release\\n     * @return Whether the operation was successful\\n     */\\n    function _releaseGameItemFromEscrow(\\n        address user,\\n        string memory gameItemId,\\n        uint256 quantity\\n    ) internal returns (bool) {\\n        if (userGameItemEscrow[user][gameItemId] < quantity) {\\n            return false;\\n        }\\n        \\n        userGameItemEscrow[user][gameItemId] -= quantity;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Check how many items a user has in escrow\\n     * @param user The user address\\n     * @param gameItemId The game item ID\\n     * @return The quantity of the item in escrow\\n     */\\n    function getGameItemEscrowBalance(\\n        address user,\\n        string memory gameItemId\\n    ) external view returns (uint256) {\\n        return userGameItemEscrow[user][gameItemId];\\n    }\\n\\n    /**\\n     * @dev Update the lowest priced listing for a game item\\n     * @param gameItemId The game item ID\\n     * @param listingId The listing ID\\n     * @param price The price\\n     */\\n    function _updateLowestPriceGameItemListing(string memory gameItemId, uint256 listingId, uint256 price) internal {\\n        uint256 currentLowestListingId = lowestPriceListingForGameItem[gameItemId];\\n\\n        if (\\n            currentLowestListingId == 0 ||\\n            !listings[currentLowestListingId].active ||\\n            price < listings[currentLowestListingId].price\\n        ) {\\n            lowestPriceListingForGameItem[gameItemId] = listingId;\\n        }\\n    }\\n\\n\\n\\n    /**\\n     * @dev Recalculate the lowest priced listing for a game item\\n     * @param gameItemId The game item ID\\n     */\\n    function _recalculateLowestPriceGameItemListing(string memory gameItemId) internal {\\n        uint256 totalListings = _listingIds.current();\\n        uint256 lowestPrice = type(uint256).max;\\n        uint256 lowestPriceId = 0;\\n\\n        for (uint256 i = 1; i <= totalListings; i++) {\\n            Listing storage listing = listings[i];\\n            if (\\n                listing.active &&\\n                keccak256(bytes(listing.gameItemId)) == keccak256(bytes(gameItemId)) &&\\n                listing.price < lowestPrice\\n            ) {\\n                lowestPrice = listing.price;\\n                lowestPriceId = i;\\n            }\\n        }\\n\\n        lowestPriceListingForGameItem[gameItemId] = lowestPriceId;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Get the lowest price for a game item\\n     * @param gameItemId The game item ID\\n     * @return The lowest price\\n     */\\n    function _getLowestPriceForGameItem(string memory gameItemId) internal view returns (uint256) {\\n        uint256 listingId = lowestPriceListingForGameItem[gameItemId];\\n        if (listingId != 0 && listings[listingId].active) {\\n            return listings[listingId].price;\\n        }\\n        return type(uint256).max;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Remove a game item from the unique items tracking when it has no active listings\\n     * @param gameItemId The game item ID to remove\\n     */\\n    function _removeUniqueGameItem(string memory gameItemId) internal {\\n        if (listedGameItems[gameItemId]) {\\n            listedGameItems[gameItemId] = false;\\n\\n            // Find and remove the item from the uniqueGameItemIds array\\n            for (uint256 i = 0; i < uniqueGameItemIds.length; i++) {\\n                if (keccak256(bytes(uniqueGameItemIds[i])) == keccak256(bytes(gameItemId))) {\\n                    // Move the last element to the position of the removed element\\n                    if (i < uniqueGameItemIds.length - 1) {\\n                        uniqueGameItemIds[i] = uniqueGameItemIds[uniqueGameItemIds.length - 1];\\n                    }\\n                    // Remove the last element\\n                    uniqueGameItemIds.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x63fa33f7d44a6e14c8eb42cbe9249a635f9d83bc47c669a1304319b8c5127a2b\",\"license\":\"MIT\"},\"openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80635f42da09116100f7578063a0020cec11610095578063cc95e29b11610064578063cc95e29b146105df578063de74e57b1461061a578063ed9b45761461064d578063f2fde38b1461066d57600080fd5b8063a0020cec14610544578063a0a7870f14610564578063a42dce801461059f578063c415b95c146105bf57600080fd5b8063741b6f6d116100d1578063741b6f6d146104bd5780638456cb59146104dd5780638da5cb5b146104f25780639407ea981461052457600080fd5b80635f42da091461044357806368fe80f414610470578063715018a6146104a857600080fd5b806331d1f33411610164578063426cc9be1161013e578063426cc9be146103a75780634adadddf146103dc5780634f85310f146103f25780635c975abb1461041f57600080fd5b806331d1f334146103455780633f4ba83a146103655780634172b3831461037a57600080fd5b80631b8bbe11116101a05780631b8bbe11146102c1578063281f7cb4146102d657806328fea9d9146102f8578063305a67a81461032557600080fd5b8063054564f0146101c757806315ddaa8d146101fa578063189600e81461021d575b600080fd5b3480156101d357600080fd5b506101e76101e23660046135b9565b61068d565b6040519081526020015b60405180910390f35b34801561020657600080fd5b5061020f6106be565b6040516101f19291906136c3565b34801561022957600080fd5b50610286610238366004613820565b80516020818301810180516008825292820191909301209152805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e0820152610100016101f1565b6102d46102cf3660046138a7565b61083a565b005b3480156102e257600080fd5b506102eb6112ef565b6040516101f19190613912565b34801561030457600080fd5b50610318610313366004613925565b6113c8565b6040516101f1919061393e565b34801561033157600080fd5b506102d4610340366004613925565b611474565b34801561035157600080fd5b506102d4610360366004613951565b611793565b34801561037157600080fd5b506102d4611a40565b34801561038657600080fd5b5061039a610395366004613973565b611a52565b6040516101f191906139b7565b3480156103b357600080fd5b506103c76103c2366004613820565b611ba5565b604080519283526020830191909152016101f1565b3480156103e857600080fd5b506101e760045481565b3480156103fe57600080fd5b5061041261040d366004613925565b611c11565b6040516101f19190613a03565b34801561042b57600080fd5b5060025460ff165b60405190151581526020016101f1565b34801561044f57600080fd5b5061046361045e366004613a72565b611daf565b6040516101f19190613a8d565b34801561047c57600080fd5b506101e761048b366004613820565b8051602081830181018051600a8252928201919093012091525481565b3480156104b457600080fd5b506102d4611e1b565b3480156104c957600080fd5b506104636104d8366004613820565b611e2d565b3480156104e957600080fd5b506102d4611f50565b3480156104fe57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016101f1565b34801561053057600080fd5b506102d461053f366004613925565b611f60565b34801561055057600080fd5b506102d461055f366004613aa0565b611fe5565b34801561057057600080fd5b5061043361057f366004613820565b8051602081830181018051600b8252928201919093012091525460ff1681565b3480156105ab57600080fd5b506102d46105ba366004613a72565b6123ca565b3480156105cb57600080fd5b5060055461050c906001600160a01b031681565b3480156105eb57600080fd5b506105ff6105fa366004613973565b612468565b604080519384526020840192909252908201526060016101f1565b34801561062657600080fd5b5061063a610635366004613925565b6124b9565b6040516101f19796959493929190613aed565b34801561065957600080fd5b506101e7610668366004613b3f565b61258a565b34801561067957600080fd5b506102d4610688366004613a72565b6125c7565b600760205281600052604060002081815481106106a957600080fd5b90600052602060002001600091509150505481565b606080306001600160a01b031663281f7cb46040518163ffffffff1660e01b8152600401600060405180830381865afa1580156106ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107279190810190613bf4565b915081516001600160401b03811115610742576107426136f1565b60405190808252806020026020018201604052801561076b578160200160208202803683370190505b50905060005b8251811015610835576000306001600160a01b031663426cc9be85848151811061079d5761079d613ca4565b60200260200101516040518263ffffffff1660e01b81526004016107c1919061393e565b6040805180830381865afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190613cba565b9150508083838151811061081757610817613ca4565b6020908102919091010152508061082d81613cf4565b915050610771565b509091565b610842612602565b61084a612626565b826108a65760405162461bcd60e51b815260206004820152602160248201527f4d7573742070726f76696465206174206c65617374206f6e65206c697374696e6044820152606760f81b60648201526084015b60405180910390fd5b8281146108ee5760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b604482015260640161089d565b6000805b84811015610a7b5760006006600088888581811061091257610912613ca4565b60209081029290920135835250810191909152604001600020600681015490915060ff166109525760405162461bcd60e51b815260040161089d90613d0d565b600085858481811061096657610966613ca4565b905060200201351180156109965750806003015485858481811061098c5761098c613ca4565b9050602002013511155b6109d55760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964207175616e7469747960801b604482015260640161089d565b6001810154336001600160a01b0390911603610a335760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742062757920796f7572206f776e206c697374696e670000000000604482015260640161089d565b848483818110610a4557610a45613ca4565b905060200201358160040154610a5b9190613d3c565b610a659084613d53565b9250508080610a7390613cf4565b9150506108f2565b5080341015610acc5760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e742066756e64732073656e74000000000000000000604482015260640161089d565b3460005b8581101561123d576000878783818110610aec57610aec613ca4565b9050602002013590506000868684818110610b0957610b09613ca4565b90506020020135905060006006600084815260200190815260200160002090506000828260040154610b3b9190613d3c565b9050600061271060045483610b509190613d3c565b610b5a9190613d66565b90506000610b688284613d88565b60018501546040519192506000916001600160a01b039091169083908381818185875af1925050503d8060008114610bbc576040519150601f19603f3d011682016040523d82523d6000602084013e610bc1565b606091505b5050905080610c125760405162461bcd60e51b815260206004820152601d60248201527f4d4f4e207472616e7366657220746f2073656c6c6572206661696c6564000000604482015260640161089d565b6005546040516000916001600160a01b03169085908381818185875af1925050503d8060008114610c5f576040519150601f19603f3d011682016040523d82523d6000602084013e610c64565b606091505b5050905080610cab5760405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b604482015260640161089d565b610cb5858b613d88565b995085600301548703610e8a5760068601805460ff19169055604051600890610ce2906002890190613e48565b9081526040519081900360200190206006018054906000610d0283613e54565b9190505550600886600201604051610d1a9190613e48565b908152602001604051809103902060060154600003610dc857610dc8866002018054610d4590613d9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7190613d9b565b8015610dbe5780601f10610d9357610100808354040283529160200191610dbe565b820191906000526020600020905b815481529060010190602001808311610da157829003601f168201915b5050505050612650565b87600a87600201604051610ddc9190613e48565b90815260200160405180910390205403610e8557610e85866002018054610e0290613d9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2e90613d9b565b8015610e7b5780601f10610e5057610100808354040283529160200191610e7b565b820191906000526020600020905b815481529060010190602001808311610e5e57829003601f168201915b50505050506127a6565b610ea4565b86866003016000828254610e9e9190613d88565b90915550505b6001860154600287018054600092610f4f926001600160a01b0390911691610ecb90613d9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef790613d9b565b8015610f445780601f10610f1957610100808354040283529160200191610f44565b820191906000526020600020905b815481529060010190602001808311610f2757829003601f168201915b50505050508a61285d565b905080610f6e5760405162461bcd60e51b815260040161089d90613e6b565b61100533886002018054610f8190613d9b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fad90613d9b565b8015610ffa5780601f10610fcf57610100808354040283529160200191610ffa565b820191906000526020600020905b815481529060010190602001808311610fdd57829003601f168201915b50505050508a6128fb565b9050806110645760405162461bcd60e51b815260206004820152602760248201527f4661696c656420746f20616464206974656d20746f206275796572277320696e60448201526676656e746f727960c81b606482015260840161089d565b60408051606081018252428152600489015460208201528082018a905290516009906110949060028b0190613e48565b90815260408051602092819003830181208054600180820183556000928352858320875160039093020191825594860151948101949094559184015160029384015590916008916110e7918c0190613e48565b908152602001604051809103902090508781600001600082825461110b9190613d53565b909155505060048101805490600061112283613cf4565b90915550506004890154600382018190556001820154101561114957600489015460018201555b60028101541580611161575080600201548960040154105b1561117157600489015460028201555b600480820154908a0154611186600183613d88565b83600701546111959190613d3c565b61119f9190613d53565b6111a99190613d66565b8160070181905550336001600160a01b03168960010160009054906101000a90046001600160a01b03166001600160a01b03168c7f58259e292896e751851b4d484a388fe984d626c964cb6aa7aee9937d8b2dc0c78c6002018d600401548f60405161121793929190613ead565b60405180910390a45050505050505050505050808061123590613cf4565b915050610ad0565b5080156112de57604051600090339083908381818185875af1925050503d8060008114611286576040519150601f19603f3d011682016040523d82523d6000602084013e61128b565b606091505b50509050806112dc5760405162461bcd60e51b815260206004820152601b60248201527f526566756e64206f6620657863657373204d4f4e206661696c65640000000000604482015260640161089d565b505b50506112e960018055565b50505050565b6060600c805480602002602001604051908101604052809291908181526020016000905b828210156113bf57838290600052602060002001805461133290613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461135e90613d9b565b80156113ab5780601f10611380576101008083540402835291602001916113ab565b820191906000526020600020905b81548152906001019060200180831161138e57829003601f168201915b505050505081526020019060010190611313565b50505050905090565b600c81815481106113d857600080fd5b9060005260206000200160009150905080546113f390613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461141f90613d9b565b801561146c5780601f106114415761010080835404028352916020019161146c565b820191906000526020600020905b81548152906001019060200180831161144f57829003601f168201915b505050505081565b61147c612626565b60008181526006602081905260409091209081015460ff166114b05760405162461bcd60e51b815260040161089d90613d0d565b60018101546001600160a01b03163314806114e45750336114d96000546001600160a01b031690565b6001600160a01b0316145b6115215760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b604482015260640161089d565b60068101805460ff19169055604051600890611541906002840190613e48565b908152604051908190036020019020600601805490600061156183613e54565b91905055506008816002016040516115799190613e48565b9081526020016040518091039020600601546000036115a4576115a4816002018054610d4590613d9b565b81600a826002016040516115b89190613e48565b908152602001604051809103902054036115de576115de816002018054610e0290613d9b565b600181015460028201805460009261168d926001600160a01b039091169161160590613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461163190613d9b565b801561167e5780601f106116535761010080835404028352916020019161167e565b820191906000526020600020905b81548152906001019060200180831161166157829003601f168201915b5050505050846003015461285d565b9050806116ac5760405162461bcd60e51b815260040161089d90613e6b565b6001820154600283018054611757926001600160a01b031691906116cf90613d9b565b80601f01602080910402602001604051908101604052809291908181526020018280546116fb90613d9b565b80156117485780601f1061171d57610100808354040283529160200191611748565b820191906000526020600020905b81548152906001019060200180831161172b57829003601f168201915b505050505084600301546128fb565b50604051339084907f8e25282255ab31897df2b0456bb993ac7f84d376861aefd84901d2d63a7428a290600090a3505061179060018055565b50565b61179b612626565b600081116117eb5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e203000000000604482015260640161089d565b60008281526006602081905260409091209081015460ff1661181f5760405162461bcd60e51b815260040161089d90613d0d565b60018101546001600160a01b0316331461186c5760405162461bcd60e51b815260206004820152600e60248201526d2737ba103a34329039b2b63632b960911b604482015260640161089d565b600481018054908390556040518490600a9061188c906002860190613e48565b9081526020016040518091039020541480156118a757508083115b156118c3576118be826002018054610e0290613d9b565b6119f6565b6119588260020180546118d590613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461190190613d9b565b801561194e5780601f106119235761010080835404028352916020019161194e565b820191906000526020600020905b81548152906001019060200180831161193157829003601f168201915b5050505050612d3c565b8310156119f6576119f682600201805461197190613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461199d90613d9b565b80156119ea5780601f106119bf576101008083540402835291602001916119ea565b820191906000526020600020905b8154815290600101906020018083116119cd57829003601f168201915b50505050508585612daa565b604080518281526020810185905285917f2bce37c591c5b0d254c3056688b080a088f160fff82b6e79f456c8a20d5570f6910160405180910390a25050611a3c60018055565b5050565b611a48612e20565b611a50612e4d565b565b60606000600984604051611a669190613f43565b9081526040519081900360200190208054909150831580611a8657508084115b15611a8f578093505b6000846001600160401b03811115611aa957611aa96136f1565b604051908082528060200260200182016040528015611afe57816020015b611aeb60405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081611ac75790505b50905060005b85811015611b99578381611b188886613d88565b611b229190613d53565b81548110611b3257611b32613ca4565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050828281518110611b7b57611b7b613ca4565b60200260200101819052508080611b9190613cf4565b915050611b04565b50925050505b92915050565b600080600a83604051611bb89190613f43565b908152602001604051809103902054915081600014158015611bec57506000828152600660208190526040909120015460ff165b15611c095750600081815260066020526040902060040154915091565b506000915091565b611c5c6040518060e001604052806000815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081526020016000151581525090565b600082118015611c6e57506003548211155b611caf5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081b1a5cdd1a5b99c8125160721b604482015260640161089d565b600082815260066020908152604091829020825160e0810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191611cf990613d9b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2590613d9b565b8015611d725780601f10611d4757610100808354040283529160200191611d72565b820191906000526020600020905b815481529060010190602001808311611d5557829003601f168201915b505050918352505060038201546020820152600482015460408201526005820154606082015260069091015460ff16151560809091015292915050565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015611e0f57602002820191906000526020600020905b815481526020019060010190808311611dfb575b50505050509050919050565b611e23612e20565b611a506000612e9f565b60606000600883604051611e419190613f43565b90815260200160405180910390206006015490506000816001600160401b03811115611e6f57611e6f6136f1565b604051908082528060200260200182016040528015611e98578160200160208202803683370190505b509050600080611ea760035490565b905060015b818111158015611ebb57508483105b15611f455760008181526006602081905260409091209081015460ff168015611f01575087516020890120604051611ef7906002840190613e48565b6040518091039020145b15611f325781858581518110611f1957611f19613ca4565b602090810291909101015283611f2e81613cf4565b9450505b5080611f3d81613cf4565b915050611eac565b509195945050505050565b611f58612e20565b611a50612eef565b611f68612e20565b610bb8811115611fa95760405162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b604482015260640161089d565b60048190556040518181527fe18aa129833f655a8166b6185277fee7a53f67e46fd32329bc2fc2ac21274d55906020015b60405180910390a150565b611fed612602565b611ff5612626565b600082116120455760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e203000604482015260640161089d565b600081116120955760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e203000000000604482015260640161089d565b60006120a2338585612f2c565b9050806120fb5760405162461bcd60e51b815260206004820152602160248201527f596f7520646f6e2774206f776e20656e6f756768206f662074686973206974656044820152606d60f81b606482015260840161089d565b6000612108338686612fc4565b9050806121635760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f2072656d6f7665206974656d2066726f6d20696e76656e604482015263746f727960e01b606482015260840161089d565b61216e3386866132f2565b61217c600380546001019055565b600061218760035490565b6040805160e0810182528281523360208083019182528284018b8152606084018b9052608084018a90524260a0850152600160c08501819052600087815260069093529490912083518155915193820180546001600160a01b0319166001600160a01b0390951694909417909355915192935091600282019061220a9082613fad565b50606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101805460ff19169115159190911790553360009081526007602090815260408083208054600181018255908452919092200182905551600890612277908890613f43565b908152604051908190036020019020600501805490600061229783613cf4565b91905055506008866040516122ac9190613f43565b90815260405190819003602001902060060180549060006122cc83613cf4565b9190505550600b866040516122e19190613f43565b9081526040519081900360200190205460ff16612368576001600b8760405161230a9190613f43565b908152604051908190036020019020805491151560ff19909216919091179055600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7016123668782613fad565b505b612373868286612daa565b336001600160a01b0316817feff9c77bc81011526aa06258443e09f9e394f6f3511c79459acbc785812607ff8887896040516123b19392919061406c565b60405180910390a35050506123c560018055565b505050565b6123d2612e20565b6001600160a01b03811661241a5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161089d565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90602001611fda565b8151602081840181018051600982529282019185019190912091905280548290811061249357600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b60066020526000908152604090208054600182015460028301805492936001600160a01b03909216926124eb90613d9b565b80601f016020809104026020016040519081016040528092919081815260200182805461251790613d9b565b80156125645780601f1061253957610100808354040283529160200191612564565b820191906000526020600020905b81548152906001019060200180831161254757829003601f168201915b505050506003830154600484015460058501546006909501549394919390925060ff1687565b6001600160a01b0382166000908152600d602052604080822090516125b0908490613f43565b908152602001604051809103902054905092915050565b6125cf612e20565b6001600160a01b0381166125f957604051631e4fbdf760e01b81526000600482015260240161089d565b61179081612e9f565b60025460ff1615611a505760405163d93c066560e01b815260040160405180910390fd5b60026001540361264957604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600b816040516126609190613f43565b9081526040519081900360200190205460ff1615611790576000600b8260405161268a9190613f43565b908152604051908190036020019020805491151560ff1990921691909117905560005b600c54811015611a3c578180519060200120600c82815481106126d2576126d2613ca4565b906000526020600020016040516126e99190613e48565b60405180910390200361279457600c5461270590600190613d88565b81101561276157600c805461271c90600190613d88565b8154811061272c5761272c613ca4565b90600052602060002001600c828154811061274957612749613ca4565b90600052602060002001908161275f9190614091565b505b600c8054806127725761277261416b565b60019003818190600052602060002001600061278e919061354f565b90555050565b8061279e81613cf4565b9150506126ad565b60006127b160035490565b9050600019600060015b8381116128355760008181526006602081905260409091209081015460ff1680156128035750855160208701206040516127f9906002840190613e48565b6040518091039020145b80156128125750838160040154105b1561282257806004015493508192505b508061282d81613cf4565b9150506127bb565b5080600a856040516128479190613f43565b9081526040519081900360200190205550505050565b6001600160a01b0383166000908152600d60205260408082209051839190612886908690613f43565b90815260200160405180910390205410156128a3575060006128f4565b6001600160a01b0384166000908152600d60205260409081902090518391906128cd908690613f43565b908152602001604051809103902060008282546128ea9190613d88565b9091555060019150505b9392505050565b60008061290785613343565b90506000196000805b83518110156129ad57868051906020012084828151811061293357612933613ca4565b602002602001015160200151805190602001200361299b5783818151811061295d5761295d613ca4565b60200260200101516000015192508584828151811061297e5761297e613ca4565b6020026020010151604001516129949190613d53565b91506129ad565b806129a581613cf4565b915050612910565b506000198214612af757600083516001600160401b038111156129d2576129d26136f1565b604051908082528060200260200182016040528015612a2757816020015b612a1460405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816129f05790505b50905060005b8451811015612ae15783858281518110612a4957612a49613ca4565b60200260200101516000015103612a9757604051806060016040528085815260200189815260200184815250828281518110612a8757612a87613ca4565b6020026020010181905250612acf565b848181518110612aa957612aa9613ca4565b6020026020010151828281518110612ac357612ac3613ca4565b60200260200101819052505b80612ad981613cf4565b915050612a2d565b50612aec88826134b5565b9450505050506128f4565b600080600085511115612bfb57604080516064808252610ca0820190925260009160208201610c808036833701905050905060005b8651811015612baf576064878281518110612b4957612b49613ca4565b6020026020010151600001511015612b9d57600182888381518110612b7057612b70613ca4565b60200260200101516000015181518110612b8c57612b8c613ca4565b911515602092830291909101909101525b80612ba781613cf4565b915050612b2c565b5060005b6064811015612bf857818181518110612bce57612bce613ca4565b6020026020010151612be65780935060019250612bf8565b80612bf081613cf4565b915050612bb3565b50505b80612c16576000855111612c10576000612c13565b84515b91505b600085516001612c269190613d53565b6001600160401b03811115612c3d57612c3d6136f1565b604051908082528060200260200182016040528015612c9257816020015b612c7f60405180606001604052806000815260200160608152602001600081525090565b815260200190600190039081612c5b5790505b50905060005b8651811015612ceb57868181518110612cb357612cb3613ca4565b6020026020010151828281518110612ccd57612ccd613ca4565b60200260200101819052508080612ce390613cf4565b915050612c98565b5060405180606001604052808481526020018a81526020018981525081875181518110612d1a57612d1a613ca4565b6020026020010181905250612d2f8a826134b5565b96505050505050506128f4565b600080600a83604051612d4f9190613f43565b908152602001604051809103902054905080600014158015612d8357506000818152600660208190526040909120015460ff165b15612da05760009081526006602052604090206004015492915050565b5060001992915050565b6000600a84604051612dbc9190613f43565b90815260200160405180910390205490508060001480612def57506000818152600660208190526040909120015460ff16155b80612e0a575060008181526006602052604090206004015482105b156112e95782600a856040516128479190613f43565b6000546001600160a01b03163314611a505760405163118cdaa760e01b815233600482015260240161089d565b612e5561352c565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612ef7612602565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e823390565b600080612f3885613343565b90506000805b8251811015612fb7578580519060200120838281518110612f6157612f61613ca4565b6020026020010151602001518051906020012003612fa557828181518110612f8b57612f8b613ca4565b60200260200101516040015182612fa29190613d53565b91505b80612faf81613cf4565b915050612f3e565b5090921115949350505050565b600080612fd085613343565b90508051600003612fe55760009150506128f4565b6000196000805b83518110156130ad57868051906020012084828151811061300f5761300f613ca4565b602002602001015160200151805190602001200361309b578584828151811061303a5761303a613ca4565b6020026020010151604001511061309b5783818151811061305d5761305d613ca4565b60200260200101516000015192508584828151811061307e5761307e613ca4565b6020026020010151604001516130949190613d88565b91506130ad565b806130a581613cf4565b915050612fec565b5060001982036130c357600093505050506128f4565b600083516001600160401b038111156130de576130de6136f1565b60405190808252806020026020018201604052801561313357816020015b61312060405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816130fc5790505b5090506000805b8551811015613211578486828151811061315657613156613ca4565b602002602001015160000151036131b95783156131b45760405180606001604052808681526020018a81526020018581525083838151811061319a5761319a613ca4565b602002602001018190525081806131b090613cf4565b9250505b6131ff565b8581815181106131cb576131cb613ca4565b60200260200101518383815181106131e5576131e5613ca4565b602002602001018190525081806131fb90613cf4565b9250505b8061320981613cf4565b91505061313a565b506000816001600160401b0381111561322c5761322c6136f1565b60405190808252806020026020018201604052801561328157816020015b61326e60405180606001604052806000815260200160608152602001600081525090565b81526020019060019003908161324a5790505b50905060005b828110156132d9578381815181106132a1576132a1613ca4565b60200260200101518282815181106132bb576132bb613ca4565b602002602001018190525080806132d190613cf4565b915050613287565b506132e48a826134b5565b9a9950505050505050505050565b6001600160a01b0383166000908152600d602052604090819020905182919061331c908590613f43565b908152602001604051809103902060008282546133399190613d53565b9091555050505050565b60025460405163646ee3bf60e11b81526001600160a01b0383811660048301526060926000926101009091049091169063c8ddc77e90602401602060405180830381865afa158015613399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bd9190614181565b90508015806133d557506001600160a01b0383163314155b1561342f576040805160008082526020820190925290613427565b61341460405180606001604052806000815260200160608152602001600081525090565b8152602001906001900390816133f05790505b509392505050565b6002546040516360351b1960e01b81526001600160a01b038581166004830152600092610100900416906360351b1990602401600060405180830381865afa15801561347f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134a79190810190614443565b509098975050505050505050565b600254604051633fc2227d60e01b815260009161010090046001600160a01b031690633fc2227d906134ed9086908690600401614526565b600060405180830381600087803b15801561350757600080fd5b505af1925050508015613518575060015b61352457506000611b9f565b506001611b9f565b60025460ff16611a5057604051638dfc202b60e01b815260040160405180910390fd5b50805461355b90613d9b565b6000825580601f1061356b575050565b601f01602090049060005260206000209081019061179091905b808211156135995760008155600101613585565b5090565b80356001600160a01b03811681146135b457600080fd5b919050565b600080604083850312156135cc57600080fd5b6135d58361359d565b946020939093013593505050565b60005b838110156135fe5781810151838201526020016135e6565b50506000910152565b6000815180845261361f8160208601602086016135e3565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101561367b578284038952613669848351613607565b98850198935090840190600101613651565b5091979650505050505050565b600081518084526020808501945080840160005b838110156136b85781518752958201959082019060010161369c565b509495945050505050565b6040815260006136d66040830185613633565b82810360208401526136e88185613688565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715613729576137296136f1565b60405290565b60405160c081016001600160401b0381118282101715613729576137296136f1565b604051608081016001600160401b0381118282101715613729576137296136f1565b604051601f8201601f191681016001600160401b038111828210171561379b5761379b6136f1565b604052919050565b60006001600160401b038211156137bc576137bc6136f1565b50601f01601f191660200190565b600082601f8301126137db57600080fd5b81356137ee6137e9826137a3565b613773565b81815284602083860101111561380357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561383257600080fd5b81356001600160401b0381111561384857600080fd5b613854848285016137ca565b949350505050565b60008083601f84011261386e57600080fd5b5081356001600160401b0381111561388557600080fd5b6020830191508360208260051b85010111156138a057600080fd5b9250929050565b600080600080604085870312156138bd57600080fd5b84356001600160401b03808211156138d457600080fd5b6138e08883890161385c565b909650945060208701359150808211156138f957600080fd5b506139068782880161385c565b95989497509550505050565b6020815260006128f46020830184613633565b60006020828403121561393757600080fd5b5035919050565b6020815260006128f46020830184613607565b6000806040838503121561396457600080fd5b50508035926020909101359150565b6000806040838503121561398657600080fd5b82356001600160401b0381111561399c57600080fd5b6139a8858286016137ca565b95602094909401359450505050565b602080825282518282018190526000919060409081850190868401855b8281101561367b57815180518552868101518786015285015185850152606090930192908501906001016139d4565b602081528151602082015260018060a01b0360208301511660408201526000604083015160e06060840152613a3c610100840182613607565b905060608401516080840152608084015160a084015260a084015160c084015260c0840151151560e08401528091505092915050565b600060208284031215613a8457600080fd5b6128f48261359d565b6020815260006128f46020830184613688565b600080600060608486031215613ab557600080fd5b83356001600160401b03811115613acb57600080fd5b613ad7868287016137ca565b9660208601359650604090950135949350505050565b8781526001600160a01b038716602082015260e060408201819052600090613b1790830188613607565b90508560608301528460808301528360a083015282151560c083015298975050505050505050565b60008060408385031215613b5257600080fd5b613b5b8361359d565b915060208301356001600160401b03811115613b7657600080fd5b613b82858286016137ca565b9150509250929050565b60006001600160401b03821115613ba557613ba56136f1565b5060051b60200190565b600082601f830112613bc057600080fd5b8151613bce6137e9826137a3565b818152846020838601011115613be357600080fd5b6138548260208301602087016135e3565b60006020808385031215613c0757600080fd5b82516001600160401b0380821115613c1e57600080fd5b818501915085601f830112613c3257600080fd5b8151613c406137e982613b8c565b81815260059190911b83018401908481019088831115613c5f57600080fd5b8585015b83811015613c9757805185811115613c7b5760008081fd5b613c898b89838a0101613baf565b845250918601918601613c63565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215613ccd57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b600060018201613d0657613d06613cde565b5060010190565b6020808252601590820152744c697374696e67206973206e6f742061637469766560581b604082015260600190565b8082028115828204841417611b9f57611b9f613cde565b80820180821115611b9f57611b9f613cde565b600082613d8357634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611b9f57611b9f613cde565b600181811c90821680613daf57607f821691505b602082108103613dcf57634e487b7160e01b600052602260045260246000fd5b50919050565b60008154613de281613d9b565b60018281168015613dfa5760018114613e0f57613e3e565b60ff1984168752821515830287019450613e3e565b8560005260208060002060005b85811015613e355781548a820152908401908201613e1c565b50505082870194505b5050505092915050565b60006128f48284613dd5565b600081613e6357613e63613cde565b506000190190565b60208082526022908201527f4661696c656420746f2072656c65617365206974656d2066726f6d20657363726040820152616f7760f01b606082015260800190565b606081526000808554613ebf81613d9b565b8060608601526080600180841660008114613ee15760018114613efb57613f2c565b60ff1985168884015283151560051b880183019550613f2c565b8a60005260208060002060005b86811015613f235781548b8201870152908401908201613f08565b8a018501975050505b505050505060208301949094525060400152919050565b60008251613f558184602087016135e3565b9190910192915050565b601f8211156123c557600081815260208120601f850160051c81016020861015613f865750805b601f850160051c820191505b81811015613fa557828155600101613f92565b505050505050565b81516001600160401b03811115613fc657613fc66136f1565b613fda81613fd48454613d9b565b84613f5f565b602080601f83116001811461400f5760008415613ff75750858301515b600019600386901b1c1916600185901b178555613fa5565b600085815260208120601f198616915b8281101561403e5788860151825594840194600190910190840161401f565b508582101561405c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60608152600061407f6060830186613607565b60208301949094525060400152919050565b81810361409c575050565b6140a68254613d9b565b6001600160401b038111156140bd576140bd6136f1565b6140cb81613fd48454613d9b565b6000601f8211600181146140ff57600083156140e75750848201545b600019600385901b1c1916600184901b178455614164565b600085815260209020601f19841690600086815260209020845b838110156141395782860154825560019586019590910190602001614119565b50858310156141575781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561419357600080fd5b815180151581146128f457600080fd5b600082601f8301126141b457600080fd5b815160206141c46137e983613b8c565b82815260059290921b840181019181810190868411156141e357600080fd5b8286015b8481101561426d5780516001600160401b03808211156142075760008081fd5b908801906060828b03601f19018113156142215760008081fd5b614229613707565b878401518152604080850151848111156142435760008081fd5b6142518e8b83890101613baf565b8a840152509190930151908301525083529183019183016141e7565b509695505050505050565b600082601f83011261428957600080fd5b815160206142996137e983613b8c565b82815260059290921b840181019181810190868411156142b857600080fd5b8286015b8481101561426d5780516001600160401b03808211156142dc5760008081fd5b9088019060c0828b03601f19018113156142f65760008081fd5b6142fe61372f565b87840151815260408085015189830152606080860151858111156143225760008081fd5b6143308f8c838a0101613baf565b8385015250608094508486015181840152505060a0808501518483015282850151818301525080875250505050838301925083810190506142bc565b600082601f83011261437d57600080fd5b8151602061438d6137e983613b8c565b82815260059290921b840181019181810190868411156143ac57600080fd5b8286015b8481101561426d5780516001600160401b03808211156143d05760008081fd5b908801906080828b03601f19018113156143ea5760008081fd5b6143f2613751565b87840151838111156144045760008081fd5b6144128d8a83880101613baf565b82525060408481015189830152606080860151918301919091529190930151908301525083529183019183016143b0565b60008060008060008086880361012081121561445e57600080fd5b87519650602088015195506080603f198201121561447b57600080fd5b50614484613751565b60408801518152606088015160208201526080880151604082015260a088015160608201528094505060c08701516001600160401b03808211156144c757600080fd5b6144d38a838b016141a3565b945060e08901519150808211156144e957600080fd5b6144f58a838b01614278565b935061010089015191508082111561450c57600080fd5b5061451989828a0161436c565b9150509295509295509295565b6001600160a01b03831681526040602080830182905283518383018190526000929160609182860190600581901b87018401888401875b838110156145a657605f198a840301855281518051845286810151888886015261458989860182613607565b918a0151948a01949094529486019492509085019060010161455d565b50909a995050505050505050505056fea26469706673582212201841b1e93d39cd94bcfced6519b863432ba3746140313882aec5e1d6aa42fbe164736f6c63430008140033",
  "devdoc": {
    "details": "A marketplace contract for trading in-game items with supply and demand dynamics similar to the Steam marketplace. All transactions are conducted with native MON.",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "buyGameItems(uint256[],uint256[])": {
        "details": "Buy multiple game items from the marketplace at once",
        "params": {
          "listingIds": "Array of listing IDs to purchase",
          "quantities": "Array of quantities to buy for each listing"
        }
      },
      "cancelListing(uint256)": {
        "details": "Cancel a listing",
        "params": {
          "listingId": "The ID of the listing to cancel"
        }
      },
      "changeListingPrice(uint256,uint256)": {
        "details": "Change the price of a listing",
        "params": {
          "listingId": "The ID of the listing",
          "newPrice": "The new price"
        }
      },
      "constructor": {
        "details": "Constructor to initialize the marketplace with required contract addresses",
        "params": {
          "_gameSave": "Address of the game save contract"
        }
      },
      "getActiveGameItemListings(string)": {
        "details": "Get all active listings for a specific game item",
        "params": {
          "gameItemId": "The game item ID"
        },
        "returns": {
          "_0": "activeListingIds Array of active listing IDs"
        }
      },
      "getAllUniqueGameItems()": {
        "details": "Get all unique game items that are currently listed in the marketplace",
        "returns": {
          "_0": "uniqueGameItems Array of unique game item IDs"
        }
      },
      "getAllUniqueItemsWithPrices()": {
        "details": "Get all unique items with their lowest prices",
        "returns": {
          "gameItemPrices": "Array of lowest prices for each game item",
          "gameItems": "Array of game item IDs"
        }
      },
      "getGameItemEscrowBalance(address,string)": {
        "details": "Check how many items a user has in escrow",
        "params": {
          "gameItemId": "The game item ID",
          "user": "The user address"
        },
        "returns": {
          "_0": "The quantity of the item in escrow"
        }
      },
      "getGameItemPriceHistory(string,uint256)": {
        "details": "Get the price history for a game item",
        "params": {
          "gameItemId": "The game item ID",
          "limit": "The maximum number of records to return (0 for all)"
        },
        "returns": {
          "_0": "records Array of price records"
        }
      },
      "getListingById(uint256)": {
        "details": "Get detailed information about a specific listing",
        "params": {
          "listingId": "The ID of the listing to retrieve"
        },
        "returns": {
          "_0": "The complete Listing struct containing all listing details"
        }
      },
      "getLowestPriceListingForGameItem(string)": {
        "details": "Get the lowest priced listing for a game item",
        "params": {
          "gameItemId": "The game item ID"
        },
        "returns": {
          "listingId": "The listing ID with the lowest price",
          "price": "The lowest price"
        }
      },
      "getSellerListings(address)": {
        "details": "Get all listings for a seller",
        "params": {
          "seller": "The address of the seller"
        },
        "returns": {
          "_0": "listingIds Array of listing IDs"
        }
      },
      "listGameItem(string,uint256,uint256)": {
        "details": "List a game item on the marketplace",
        "params": {
          "gameItemId": "The ID of the game item as used in the game",
          "price": "The price per unit in MON (wei)",
          "quantity": "The quantity of the item to list"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the marketplace"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFeeCollector(address)": {
        "details": "Set the fee collector address",
        "params": {
          "newFeeCollector": "The new fee collector address"
        }
      },
      "setMarketplaceFee(uint256)": {
        "details": "Set the marketplace fee percentage (in basis points)",
        "params": {
          "newFeePercentage": "The new fee percentage (100 = 1%, 10000 = 100%)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the marketplace"
      }
    },
    "title": "VolatileMarketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 305,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 186,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 855,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "gameSave",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(GameSave)830"
      },
      {
        "astId": 858,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "_listingIds",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)3147_storage"
      },
      {
        "astId": 861,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "marketplaceFeePercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 863,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "feeCollector",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 907,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "listings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Listing)878_storage)"
      },
      {
        "astId": 912,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "sellerListings",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 917,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "gameItemStats",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(MarketStats)902_storage)"
      },
      {
        "astId": 923,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "gameItemSaleHistory",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(SaleRecord)885_storage)dyn_storage)"
      },
      {
        "astId": 927,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "lowestPriceListingForGameItem",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 931,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "listedGameItems",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 934,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "uniqueGameItemIds",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 940,
        "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
        "label": "userGameItemEscrow",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SaleRecord)885_storage)dyn_storage": {
        "base": "t_struct(SaleRecord)885_storage",
        "encoding": "dynamic_array",
        "label": "struct VolatileMarketplace.SaleRecord[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GameSave)830": {
        "encoding": "inplace",
        "label": "contract GameSave",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(SaleRecord)885_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VolatileMarketplace.SaleRecord[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(SaleRecord)885_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MarketStats)902_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VolatileMarketplace.MarketStats)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketStats)902_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)878_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VolatileMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)878_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3147_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3146,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Listing)878_storage": {
        "encoding": "inplace",
        "label": "struct VolatileMarketplace.Listing",
        "members": [
          {
            "astId": 865,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 867,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 869,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "gameItemId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 871,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "quantity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 873,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 875,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "listedAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 877,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(MarketStats)902_storage": {
        "encoding": "inplace",
        "label": "struct VolatileMarketplace.MarketStats",
        "members": [
          {
            "astId": 887,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "totalVolume",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 889,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "highestPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 891,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "lowestPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "lastSoldPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 895,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "numberOfSales",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 897,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "totalListings",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 899,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "currentListings",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 901,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "avgSoldPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(SaleRecord)885_storage": {
        "encoding": "inplace",
        "label": "struct VolatileMarketplace.SaleRecord",
        "members": [
          {
            "astId": 880,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 882,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 884,
            "contract": "contracts/VolatileMarketplace.sol:VolatileMarketplace",
            "label": "quantity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}